
STM32_LCD_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c0c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a968  08004d9c  08004d9c  00005d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f704  0800f704  00011074  2**0
                  CONTENTS
  4 .ARM          00000008  0800f704  0800f704  00010704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f70c  0800f70c  00011074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f70c  0800f70c  0001070c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f710  0800f710  00010710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800f714  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000074  0800f788  00011074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  0800f788  000112cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cec6  00000000  00000000  000110a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e35  00000000  00000000  0001df6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  0001fda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00026181  00000000  00000000  00020910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e0db  00000000  00000000  00046a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e9abe  00000000  00000000  00054b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0013e62a  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000008b8  00000000  00000000  0013e66d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003334  00000000  00000000  0013ef28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0014225c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d84 	.word	0x08004d84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004d84 	.word	0x08004d84

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <SSD1351_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32l4xx_hal.h"
#include "ssd1351.h"

static void SSD1351_Select() {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SSD1351_CS_GPIO_Port, SSD1351_CS_Pin, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	2140      	movs	r1, #64	@ 0x40
 8000578:	4802      	ldr	r0, [pc, #8]	@ (8000584 <SSD1351_Select+0x14>)
 800057a:	f001 fae9 	bl	8001b50 <HAL_GPIO_WritePin>
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	48000400 	.word	0x48000400

08000588 <SSD1351_Unselect>:

void SSD1351_Unselect() {
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SSD1351_CS_GPIO_Port, SSD1351_CS_Pin, GPIO_PIN_SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2140      	movs	r1, #64	@ 0x40
 8000590:	4802      	ldr	r0, [pc, #8]	@ (800059c <SSD1351_Unselect+0x14>)
 8000592:	f001 fadd 	bl	8001b50 <HAL_GPIO_WritePin>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	48000400 	.word	0x48000400

080005a0 <SSD1351_Reset>:

static void SSD1351_Reset() {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SSD1351_RES_GPIO_Port, SSD1351_RES_Pin, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2180      	movs	r1, #128	@ 0x80
 80005a8:	480d      	ldr	r0, [pc, #52]	@ (80005e0 <SSD1351_Reset+0x40>)
 80005aa:	f001 fad1 	bl	8001b50 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80005ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005b2:	f001 f819 	bl	80015e8 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1351_RES_GPIO_Port, SSD1351_RES_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2180      	movs	r1, #128	@ 0x80
 80005ba:	4809      	ldr	r0, [pc, #36]	@ (80005e0 <SSD1351_Reset+0x40>)
 80005bc:	f001 fac8 	bl	8001b50 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80005c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005c4:	f001 f810 	bl	80015e8 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1351_RES_GPIO_Port, SSD1351_RES_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2180      	movs	r1, #128	@ 0x80
 80005cc:	4804      	ldr	r0, [pc, #16]	@ (80005e0 <SSD1351_Reset+0x40>)
 80005ce:	f001 fabf 	bl	8001b50 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80005d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005d6:	f001 f807 	bl	80015e8 <HAL_Delay>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	48000800 	.word	0x48000800

080005e4 <SSD1351_WriteCommand>:

static void SSD1351_WriteCommand(uint8_t cmd) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1351_DC_GPIO_Port, SSD1351_DC_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f8:	f001 faaa 	bl	8001b50 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1351_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80005fc:	1df9      	adds	r1, r7, #7
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	2201      	movs	r2, #1
 8000604:	4803      	ldr	r0, [pc, #12]	@ (8000614 <SSD1351_WriteCommand+0x30>)
 8000606:	f002 fe7e 	bl	8003306 <HAL_SPI_Transmit>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000090 	.word	0x20000090

08000618 <SSD1351_WriteData>:

static void SSD1351_WriteData(uint8_t* buff, size_t buff_size) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1351_DC_GPIO_Port, SSD1351_DC_Pin, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000628:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062c:	f001 fa90 	bl	8001b50 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000630:	e015      	b.n	800065e <SSD1351_WriteData+0x46>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000638:	bf28      	it	cs
 800063a:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 800063e:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&SSD1351_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000640:	89fa      	ldrh	r2, [r7, #14]
 8000642:	f04f 33ff 	mov.w	r3, #4294967295
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	4809      	ldr	r0, [pc, #36]	@ (8000670 <SSD1351_WriteData+0x58>)
 800064a:	f002 fe5c 	bl	8003306 <HAL_SPI_Transmit>
        buff += chunk_size;
 800064e:	89fb      	ldrh	r3, [r7, #14]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	4413      	add	r3, r2
 8000654:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8000656:	89fb      	ldrh	r3, [r7, #14]
 8000658:	683a      	ldr	r2, [r7, #0]
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1e6      	bne.n	8000632 <SSD1351_WriteData+0x1a>
    }
}
 8000664:	bf00      	nop
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000090 	.word	0x20000090

08000674 <SSD1351_SetAddressWindow>:

static void SSD1351_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	4604      	mov	r4, r0
 800067c:	4608      	mov	r0, r1
 800067e:	4611      	mov	r1, r2
 8000680:	461a      	mov	r2, r3
 8000682:	4623      	mov	r3, r4
 8000684:	80fb      	strh	r3, [r7, #6]
 8000686:	4603      	mov	r3, r0
 8000688:	80bb      	strh	r3, [r7, #4]
 800068a:	460b      	mov	r3, r1
 800068c:	807b      	strh	r3, [r7, #2]
 800068e:	4613      	mov	r3, r2
 8000690:	803b      	strh	r3, [r7, #0]
    // column address set
    SSD1351_WriteCommand(0x15); // SETCOLUMN
 8000692:	2015      	movs	r0, #21
 8000694:	f7ff ffa6 	bl	80005e4 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { x0 & 0xFF, x1 & 0xFF };
 8000698:	88fb      	ldrh	r3, [r7, #6]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	733b      	strb	r3, [r7, #12]
 800069e:	887b      	ldrh	r3, [r7, #2]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	737b      	strb	r3, [r7, #13]
        SSD1351_WriteData(data, sizeof(data));
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2102      	movs	r1, #2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ffb4 	bl	8000618 <SSD1351_WriteData>
    }

    // row address set
    SSD1351_WriteCommand(0x75); // SETROW
 80006b0:	2075      	movs	r0, #117	@ 0x75
 80006b2:	f7ff ff97 	bl	80005e4 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { y0 & 0xFF, y1 & 0xFF };
 80006b6:	88bb      	ldrh	r3, [r7, #4]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	723b      	strb	r3, [r7, #8]
 80006bc:	883b      	ldrh	r3, [r7, #0]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	727b      	strb	r3, [r7, #9]
        SSD1351_WriteData(data, sizeof(data));
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	2102      	movs	r1, #2
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ffa5 	bl	8000618 <SSD1351_WriteData>
    }

    // write to RAM
    SSD1351_WriteCommand(0x5C); // WRITERAM
 80006ce:	205c      	movs	r0, #92	@ 0x5c
 80006d0:	f7ff ff88 	bl	80005e4 <SSD1351_WriteCommand>
}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd90      	pop	{r4, r7, pc}

080006dc <SSD1351_Init>:

void SSD1351_Init() {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b090      	sub	sp, #64	@ 0x40
 80006e0:	af00      	add	r7, sp, #0
    SSD1351_Select();
 80006e2:	f7ff ff45 	bl	8000570 <SSD1351_Select>
    SSD1351_Reset();
 80006e6:	f7ff ff5b 	bl	80005a0 <SSD1351_Reset>

    // command list is based on https://github.com/adafruit/Adafruit-SSD1351-library

    SSD1351_WriteCommand(0xFD); // COMMANDLOCK
 80006ea:	20fd      	movs	r0, #253	@ 0xfd
 80006ec:	f7ff ff7a 	bl	80005e4 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x12 };
 80006f0:	2312      	movs	r3, #18
 80006f2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        SSD1351_WriteData(data, sizeof(data));
 80006f6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80006fa:	2101      	movs	r1, #1
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff8b 	bl	8000618 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xFD); // COMMANDLOCK
 8000702:	20fd      	movs	r0, #253	@ 0xfd
 8000704:	f7ff ff6e 	bl	80005e4 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0xB1 };
 8000708:	23b1      	movs	r3, #177	@ 0xb1
 800070a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        SSD1351_WriteData(data, sizeof(data));
 800070e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000712:	2101      	movs	r1, #1
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff7f 	bl	8000618 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xAE); // DISPLAYOFF
 800071a:	20ae      	movs	r0, #174	@ 0xae
 800071c:	f7ff ff62 	bl	80005e4 <SSD1351_WriteCommand>
    SSD1351_WriteCommand(0xB3); // CLOCKDIV
 8000720:	20b3      	movs	r0, #179	@ 0xb3
 8000722:	f7ff ff5f 	bl	80005e4 <SSD1351_WriteCommand>
    SSD1351_WriteCommand(0xF1); // 7:4 = Oscillator Frequency, 3:0 = CLK Div Ratio (A[3:0]+1 = 1..16)
 8000726:	20f1      	movs	r0, #241	@ 0xf1
 8000728:	f7ff ff5c 	bl	80005e4 <SSD1351_WriteCommand>
    SSD1351_WriteCommand(0xCA); // MUXRATIO
 800072c:	20ca      	movs	r0, #202	@ 0xca
 800072e:	f7ff ff59 	bl	80005e4 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x7F }; // 127
 8000732:	237f      	movs	r3, #127	@ 0x7f
 8000734:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        SSD1351_WriteData(data, sizeof(data));
 8000738:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800073c:	2101      	movs	r1, #1
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ff6a 	bl	8000618 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xA0); // SETREMAP
 8000744:	20a0      	movs	r0, #160	@ 0xa0
 8000746:	f7ff ff4d 	bl	80005e4 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x74 };
 800074a:	2374      	movs	r3, #116	@ 0x74
 800074c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        SSD1351_WriteData(data, sizeof(data));
 8000750:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000754:	2101      	movs	r1, #1
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ff5e 	bl	8000618 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0x15); // SETCOLUMN
 800075c:	2015      	movs	r0, #21
 800075e:	f7ff ff41 	bl	80005e4 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x7F };
 8000762:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
 8000766:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        SSD1351_WriteData(data, sizeof(data));
 8000768:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800076c:	2102      	movs	r1, #2
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ff52 	bl	8000618 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0x75); // SETROW
 8000774:	2075      	movs	r0, #117	@ 0x75
 8000776:	f7ff ff35 	bl	80005e4 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x7F };
 800077a:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
 800077e:	853b      	strh	r3, [r7, #40]	@ 0x28
        SSD1351_WriteData(data, sizeof(data));
 8000780:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000784:	2102      	movs	r1, #2
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff46 	bl	8000618 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xA1); // STARTLINE
 800078c:	20a1      	movs	r0, #161	@ 0xa1
 800078e:	f7ff ff29 	bl	80005e4 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x00 }; // 96 if display height == 96
 8000792:	2300      	movs	r3, #0
 8000794:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        SSD1351_WriteData(data, sizeof(data));
 8000798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079c:	2101      	movs	r1, #1
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff3a 	bl	8000618 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xA2); // DISPLAYOFFSET
 80007a4:	20a2      	movs	r0, #162	@ 0xa2
 80007a6:	f7ff ff1d 	bl	80005e4 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 80007aa:	2300      	movs	r3, #0
 80007ac:	f887 3020 	strb.w	r3, [r7, #32]
        SSD1351_WriteData(data, sizeof(data));
 80007b0:	f107 0320 	add.w	r3, r7, #32
 80007b4:	2101      	movs	r1, #1
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff2e 	bl	8000618 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xB5); // SETGPIO
 80007bc:	20b5      	movs	r0, #181	@ 0xb5
 80007be:	f7ff ff11 	bl	80005e4 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 80007c2:	2300      	movs	r3, #0
 80007c4:	773b      	strb	r3, [r7, #28]
        SSD1351_WriteData(data, sizeof(data));
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	2101      	movs	r1, #1
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff23 	bl	8000618 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xAB); // FUNCTIONSELECT
 80007d2:	20ab      	movs	r0, #171	@ 0xab
 80007d4:	f7ff ff06 	bl	80005e4 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 80007d8:	2301      	movs	r3, #1
 80007da:	763b      	strb	r3, [r7, #24]
        SSD1351_WriteData(data, sizeof(data));
 80007dc:	f107 0318 	add.w	r3, r7, #24
 80007e0:	2101      	movs	r1, #1
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ff18 	bl	8000618 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xB1); // PRECHARGE
 80007e8:	20b1      	movs	r0, #177	@ 0xb1
 80007ea:	f7ff fefb 	bl	80005e4 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x32 };
 80007ee:	2332      	movs	r3, #50	@ 0x32
 80007f0:	753b      	strb	r3, [r7, #20]
        SSD1351_WriteData(data, sizeof(data));
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2101      	movs	r1, #1
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff0d 	bl	8000618 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xBE); // VCOMH
 80007fe:	20be      	movs	r0, #190	@ 0xbe
 8000800:	f7ff fef0 	bl	80005e4 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x05 };
 8000804:	2305      	movs	r3, #5
 8000806:	743b      	strb	r3, [r7, #16]
        SSD1351_WriteData(data, sizeof(data));
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	2101      	movs	r1, #1
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff02 	bl	8000618 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xA6); // NORMALDISPLAY (don't invert)
 8000814:	20a6      	movs	r0, #166	@ 0xa6
 8000816:	f7ff fee5 	bl	80005e4 <SSD1351_WriteCommand>
    SSD1351_WriteCommand(0xC1); // CONTRASTABC
 800081a:	20c1      	movs	r0, #193	@ 0xc1
 800081c:	f7ff fee2 	bl	80005e4 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0xC8, 0x80, 0xC8 };
 8000820:	4a1e      	ldr	r2, [pc, #120]	@ (800089c <SSD1351_Init+0x1c0>)
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	6812      	ldr	r2, [r2, #0]
 8000828:	4611      	mov	r1, r2
 800082a:	8019      	strh	r1, [r3, #0]
 800082c:	3302      	adds	r3, #2
 800082e:	0c12      	lsrs	r2, r2, #16
 8000830:	701a      	strb	r2, [r3, #0]
        SSD1351_WriteData(data, sizeof(data));
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	2103      	movs	r1, #3
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff feed 	bl	8000618 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xC7); // CONTRASTMASTER
 800083e:	20c7      	movs	r0, #199	@ 0xc7
 8000840:	f7ff fed0 	bl	80005e4 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x0F };
 8000844:	230f      	movs	r3, #15
 8000846:	723b      	strb	r3, [r7, #8]
        SSD1351_WriteData(data, sizeof(data));
 8000848:	f107 0308 	add.w	r3, r7, #8
 800084c:	2101      	movs	r1, #1
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fee2 	bl	8000618 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xB4); // SETVSL
 8000854:	20b4      	movs	r0, #180	@ 0xb4
 8000856:	f7ff fec5 	bl	80005e4 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0xA0, 0xB5, 0x55 };
 800085a:	4a11      	ldr	r2, [pc, #68]	@ (80008a0 <SSD1351_Init+0x1c4>)
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	6812      	ldr	r2, [r2, #0]
 8000860:	4611      	mov	r1, r2
 8000862:	8019      	strh	r1, [r3, #0]
 8000864:	3302      	adds	r3, #2
 8000866:	0c12      	lsrs	r2, r2, #16
 8000868:	701a      	strb	r2, [r3, #0]
        SSD1351_WriteData(data, sizeof(data));
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2103      	movs	r1, #3
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fed2 	bl	8000618 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xB6); // PRECHARGE2
 8000874:	20b6      	movs	r0, #182	@ 0xb6
 8000876:	f7ff feb5 	bl	80005e4 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 800087a:	2301      	movs	r3, #1
 800087c:	703b      	strb	r3, [r7, #0]
        SSD1351_WriteData(data, sizeof(data));
 800087e:	463b      	mov	r3, r7
 8000880:	2101      	movs	r1, #1
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fec8 	bl	8000618 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xAF); // DISPLAYON
 8000888:	20af      	movs	r0, #175	@ 0xaf
 800088a:	f7ff feab 	bl	80005e4 <SSD1351_WriteCommand>

    SSD1351_Unselect();
 800088e:	f7ff fe7b 	bl	8000588 <SSD1351_Unselect>
}
 8000892:	bf00      	nop
 8000894:	3740      	adds	r7, #64	@ 0x40
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	08004d9c 	.word	0x08004d9c
 80008a0:	08004da0 	.word	0x08004da0

080008a4 <SSD1351_DrawPixel>:

void SSD1351_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	80fb      	strh	r3, [r7, #6]
 80008ae:	460b      	mov	r3, r1
 80008b0:	80bb      	strh	r3, [r7, #4]
 80008b2:	4613      	mov	r3, r2
 80008b4:	807b      	strh	r3, [r7, #2]
    if((x >= SSD1351_WIDTH) || (y >= SSD1351_HEIGHT))
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80008ba:	d81f      	bhi.n	80008fc <SSD1351_DrawPixel+0x58>
 80008bc:	88bb      	ldrh	r3, [r7, #4]
 80008be:	2b7f      	cmp	r3, #127	@ 0x7f
 80008c0:	d81c      	bhi.n	80008fc <SSD1351_DrawPixel+0x58>
        return;

    SSD1351_Select();
 80008c2:	f7ff fe55 	bl	8000570 <SSD1351_Select>

    SSD1351_SetAddressWindow(x, y, x+1, y+1);
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	3301      	adds	r3, #1
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	88bb      	ldrh	r3, [r7, #4]
 80008ce:	3301      	adds	r3, #1
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	88b9      	ldrh	r1, [r7, #4]
 80008d4:	88f8      	ldrh	r0, [r7, #6]
 80008d6:	f7ff fecd 	bl	8000674 <SSD1351_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80008da:	887b      	ldrh	r3, [r7, #2]
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	b29b      	uxth	r3, r3
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	733b      	strb	r3, [r7, #12]
 80008e4:	887b      	ldrh	r3, [r7, #2]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	737b      	strb	r3, [r7, #13]
    SSD1351_WriteData(data, sizeof(data));
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	2102      	movs	r1, #2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fe91 	bl	8000618 <SSD1351_WriteData>

    SSD1351_Unselect();
 80008f6:	f7ff fe47 	bl	8000588 <SSD1351_Unselect>
 80008fa:	e000      	b.n	80008fe <SSD1351_DrawPixel+0x5a>
        return;
 80008fc:	bf00      	nop
}
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <SSD1351_WriteChar>:

static void SSD1351_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000904:	b082      	sub	sp, #8
 8000906:	b580      	push	{r7, lr}
 8000908:	b088      	sub	sp, #32
 800090a:	af00      	add	r7, sp, #0
 800090c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800090e:	4603      	mov	r3, r0
 8000910:	80fb      	strh	r3, [r7, #6]
 8000912:	460b      	mov	r3, r1
 8000914:	80bb      	strh	r3, [r7, #4]
 8000916:	4613      	mov	r3, r2
 8000918:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    SSD1351_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800091a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800091e:	461a      	mov	r2, r3
 8000920:	88fb      	ldrh	r3, [r7, #6]
 8000922:	4413      	add	r3, r2
 8000924:	b29b      	uxth	r3, r3
 8000926:	3b01      	subs	r3, #1
 8000928:	b29a      	uxth	r2, r3
 800092a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800092e:	4619      	mov	r1, r3
 8000930:	88bb      	ldrh	r3, [r7, #4]
 8000932:	440b      	add	r3, r1
 8000934:	b29b      	uxth	r3, r3
 8000936:	3b01      	subs	r3, #1
 8000938:	b29b      	uxth	r3, r3
 800093a:	88b9      	ldrh	r1, [r7, #4]
 800093c:	88f8      	ldrh	r0, [r7, #6]
 800093e:	f7ff fe99 	bl	8000674 <SSD1351_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
 8000946:	e041      	b.n	80009cc <SSD1351_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 8000948:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800094a:	78fb      	ldrb	r3, [r7, #3]
 800094c:	3b20      	subs	r3, #32
 800094e:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8000952:	fb01 f303 	mul.w	r3, r1, r3
 8000956:	4619      	mov	r1, r3
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	440b      	add	r3, r1
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	4413      	add	r3, r2
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000964:	2300      	movs	r3, #0
 8000966:	61bb      	str	r3, [r7, #24]
 8000968:	e027      	b.n	80009ba <SSD1351_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 800096a:	697a      	ldr	r2, [r7, #20]
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000976:	2b00      	cmp	r3, #0
 8000978:	d00e      	beq.n	8000998 <SSD1351_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800097a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800097c:	0a1b      	lsrs	r3, r3, #8
 800097e:	b29b      	uxth	r3, r3
 8000980:	b2db      	uxtb	r3, r3
 8000982:	743b      	strb	r3, [r7, #16]
 8000984:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000986:	b2db      	uxtb	r3, r3
 8000988:	747b      	strb	r3, [r7, #17]
                SSD1351_WriteData(data, sizeof(data));
 800098a:	f107 0310 	add.w	r3, r7, #16
 800098e:	2102      	movs	r1, #2
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fe41 	bl	8000618 <SSD1351_WriteData>
 8000996:	e00d      	b.n	80009b4 <SSD1351_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000998:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800099a:	0a1b      	lsrs	r3, r3, #8
 800099c:	b29b      	uxth	r3, r3
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	733b      	strb	r3, [r7, #12]
 80009a2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	737b      	strb	r3, [r7, #13]
                SSD1351_WriteData(data, sizeof(data));
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	2102      	movs	r1, #2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fe32 	bl	8000618 <SSD1351_WriteData>
        for(j = 0; j < font.width; j++) {
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	3301      	adds	r3, #1
 80009b8:	61bb      	str	r3, [r7, #24]
 80009ba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80009be:	461a      	mov	r2, r3
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d3d1      	bcc.n	800096a <SSD1351_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3301      	adds	r3, #1
 80009ca:	61fb      	str	r3, [r7, #28]
 80009cc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80009d0:	461a      	mov	r2, r3
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d3b7      	bcc.n	8000948 <SSD1351_WriteChar+0x44>
            }
        }
    }
}
 80009d8:	bf00      	nop
 80009da:	bf00      	nop
 80009dc:	3720      	adds	r7, #32
 80009de:	46bd      	mov	sp, r7
 80009e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009e4:	b002      	add	sp, #8
 80009e6:	4770      	bx	lr

080009e8 <SSD1351_WriteString>:

void SSD1351_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80009e8:	b082      	sub	sp, #8
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b086      	sub	sp, #24
 80009ee:	af04      	add	r7, sp, #16
 80009f0:	603a      	str	r2, [r7, #0]
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	4603      	mov	r3, r0
 80009f6:	80fb      	strh	r3, [r7, #6]
 80009f8:	460b      	mov	r3, r1
 80009fa:	80bb      	strh	r3, [r7, #4]
    SSD1351_Select();
 80009fc:	f7ff fdb8 	bl	8000570 <SSD1351_Select>

    while(*str) {
 8000a00:	e02d      	b.n	8000a5e <SSD1351_WriteString+0x76>
        if(x + font.width >= SSD1351_WIDTH) {
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	7d3a      	ldrb	r2, [r7, #20]
 8000a06:	4413      	add	r3, r2
 8000a08:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a0a:	dd13      	ble.n	8000a34 <SSD1351_WriteString+0x4c>
            x = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000a10:	7d7b      	ldrb	r3, [r7, #21]
 8000a12:	461a      	mov	r2, r3
 8000a14:	88bb      	ldrh	r3, [r7, #4]
 8000a16:	4413      	add	r3, r2
 8000a18:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= SSD1351_HEIGHT) {
 8000a1a:	88bb      	ldrh	r3, [r7, #4]
 8000a1c:	7d7a      	ldrb	r2, [r7, #21]
 8000a1e:	4413      	add	r3, r2
 8000a20:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a22:	dc21      	bgt.n	8000a68 <SSD1351_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b20      	cmp	r3, #32
 8000a2a:	d103      	bne.n	8000a34 <SSD1351_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	603b      	str	r3, [r7, #0]
                continue;
 8000a32:	e014      	b.n	8000a5e <SSD1351_WriteString+0x76>
            }
        }

        SSD1351_WriteChar(x, y, *str, font, color, bgcolor);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	781a      	ldrb	r2, [r3, #0]
 8000a38:	88b9      	ldrh	r1, [r7, #4]
 8000a3a:	88f8      	ldrh	r0, [r7, #6]
 8000a3c:	8c3b      	ldrh	r3, [r7, #32]
 8000a3e:	9302      	str	r3, [sp, #8]
 8000a40:	8bbb      	ldrh	r3, [r7, #28]
 8000a42:	9301      	str	r3, [sp, #4]
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	9300      	str	r3, [sp, #0]
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	f7ff ff5b 	bl	8000904 <SSD1351_WriteChar>
        x += font.width;
 8000a4e:	7d3b      	ldrb	r3, [r7, #20]
 8000a50:	461a      	mov	r2, r3
 8000a52:	88fb      	ldrh	r3, [r7, #6]
 8000a54:	4413      	add	r3, r2
 8000a56:	80fb      	strh	r3, [r7, #6]
        str++;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d1cd      	bne.n	8000a02 <SSD1351_WriteString+0x1a>
 8000a66:	e000      	b.n	8000a6a <SSD1351_WriteString+0x82>
                break;
 8000a68:	bf00      	nop
    }

    SSD1351_Unselect();
 8000a6a:	f7ff fd8d 	bl	8000588 <SSD1351_Unselect>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a78:	b002      	add	sp, #8
 8000a7a:	4770      	bx	lr

08000a7c <SSD1351_FillRectangle>:

void SSD1351_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4604      	mov	r4, r0
 8000a84:	4608      	mov	r0, r1
 8000a86:	4611      	mov	r1, r2
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4623      	mov	r3, r4
 8000a8c:	80fb      	strh	r3, [r7, #6]
 8000a8e:	4603      	mov	r3, r0
 8000a90:	80bb      	strh	r3, [r7, #4]
 8000a92:	460b      	mov	r3, r1
 8000a94:	807b      	strh	r3, [r7, #2]
 8000a96:	4613      	mov	r3, r2
 8000a98:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= SSD1351_WIDTH) || (y >= SSD1351_HEIGHT)) return;
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a9e:	d853      	bhi.n	8000b48 <SSD1351_FillRectangle+0xcc>
 8000aa0:	88bb      	ldrh	r3, [r7, #4]
 8000aa2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000aa4:	d850      	bhi.n	8000b48 <SSD1351_FillRectangle+0xcc>
    if((x + w - 1) >= SSD1351_WIDTH) w = SSD1351_WIDTH - x;
 8000aa6:	88fa      	ldrh	r2, [r7, #6]
 8000aa8:	887b      	ldrh	r3, [r7, #2]
 8000aaa:	4413      	add	r3, r2
 8000aac:	2b80      	cmp	r3, #128	@ 0x80
 8000aae:	dd03      	ble.n	8000ab8 <SSD1351_FillRectangle+0x3c>
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000ab6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= SSD1351_HEIGHT) h = SSD1351_HEIGHT - y;
 8000ab8:	88ba      	ldrh	r2, [r7, #4]
 8000aba:	883b      	ldrh	r3, [r7, #0]
 8000abc:	4413      	add	r3, r2
 8000abe:	2b80      	cmp	r3, #128	@ 0x80
 8000ac0:	dd03      	ble.n	8000aca <SSD1351_FillRectangle+0x4e>
 8000ac2:	88bb      	ldrh	r3, [r7, #4]
 8000ac4:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000ac8:	803b      	strh	r3, [r7, #0]

    SSD1351_Select();
 8000aca:	f7ff fd51 	bl	8000570 <SSD1351_Select>
    SSD1351_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000ace:	88fa      	ldrh	r2, [r7, #6]
 8000ad0:	887b      	ldrh	r3, [r7, #2]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	b29c      	uxth	r4, r3
 8000ada:	88ba      	ldrh	r2, [r7, #4]
 8000adc:	883b      	ldrh	r3, [r7, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	88b9      	ldrh	r1, [r7, #4]
 8000ae8:	88f8      	ldrh	r0, [r7, #6]
 8000aea:	4622      	mov	r2, r4
 8000aec:	f7ff fdc2 	bl	8000674 <SSD1351_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000af0:	8c3b      	ldrh	r3, [r7, #32]
 8000af2:	0a1b      	lsrs	r3, r3, #8
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	733b      	strb	r3, [r7, #12]
 8000afa:	8c3b      	ldrh	r3, [r7, #32]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(SSD1351_DC_GPIO_Port, SSD1351_DC_Pin, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b0a:	f001 f821 	bl	8001b50 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000b0e:	883b      	ldrh	r3, [r7, #0]
 8000b10:	80bb      	strh	r3, [r7, #4]
 8000b12:	e013      	b.n	8000b3c <SSD1351_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 8000b14:	887b      	ldrh	r3, [r7, #2]
 8000b16:	80fb      	strh	r3, [r7, #6]
 8000b18:	e00a      	b.n	8000b30 <SSD1351_FillRectangle+0xb4>
            HAL_SPI_Transmit(&SSD1351_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000b1a:	f107 010c 	add.w	r1, r7, #12
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	2202      	movs	r2, #2
 8000b24:	480a      	ldr	r0, [pc, #40]	@ (8000b50 <SSD1351_FillRectangle+0xd4>)
 8000b26:	f002 fbee 	bl	8003306 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000b2a:	88fb      	ldrh	r3, [r7, #6]
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	80fb      	strh	r3, [r7, #6]
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d1f1      	bne.n	8000b1a <SSD1351_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 8000b36:	88bb      	ldrh	r3, [r7, #4]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	80bb      	strh	r3, [r7, #4]
 8000b3c:	88bb      	ldrh	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d1e8      	bne.n	8000b14 <SSD1351_FillRectangle+0x98>
        }
    }

    SSD1351_Unselect();
 8000b42:	f7ff fd21 	bl	8000588 <SSD1351_Unselect>
 8000b46:	e000      	b.n	8000b4a <SSD1351_FillRectangle+0xce>
    if((x >= SSD1351_WIDTH) || (y >= SSD1351_HEIGHT)) return;
 8000b48:	bf00      	nop
}
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd90      	pop	{r4, r7, pc}
 8000b50:	20000090 	.word	0x20000090

08000b54 <SSD1351_FillScreen>:

void SSD1351_FillScreen(uint16_t color) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af02      	add	r7, sp, #8
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	80fb      	strh	r3, [r7, #6]
    SSD1351_FillRectangle(0, 0, SSD1351_WIDTH, SSD1351_HEIGHT, color);
 8000b5e:	88fb      	ldrh	r3, [r7, #6]
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	2380      	movs	r3, #128	@ 0x80
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	2100      	movs	r1, #0
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f7ff ff87 	bl	8000a7c <SSD1351_FillRectangle>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <SSD1351_DrawImage>:

void SSD1351_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8000b76:	b590      	push	{r4, r7, lr}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4604      	mov	r4, r0
 8000b7e:	4608      	mov	r0, r1
 8000b80:	4611      	mov	r1, r2
 8000b82:	461a      	mov	r2, r3
 8000b84:	4623      	mov	r3, r4
 8000b86:	80fb      	strh	r3, [r7, #6]
 8000b88:	4603      	mov	r3, r0
 8000b8a:	80bb      	strh	r3, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	807b      	strh	r3, [r7, #2]
 8000b90:	4613      	mov	r3, r2
 8000b92:	803b      	strh	r3, [r7, #0]
    if((x >= SSD1351_WIDTH) || (y >= SSD1351_HEIGHT)) return;
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b98:	d82b      	bhi.n	8000bf2 <SSD1351_DrawImage+0x7c>
 8000b9a:	88bb      	ldrh	r3, [r7, #4]
 8000b9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b9e:	d828      	bhi.n	8000bf2 <SSD1351_DrawImage+0x7c>
    if((x + w - 1) >= SSD1351_WIDTH) return;
 8000ba0:	88fa      	ldrh	r2, [r7, #6]
 8000ba2:	887b      	ldrh	r3, [r7, #2]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	2b80      	cmp	r3, #128	@ 0x80
 8000ba8:	dc25      	bgt.n	8000bf6 <SSD1351_DrawImage+0x80>
    if((y + h - 1) >= SSD1351_HEIGHT) return;
 8000baa:	88ba      	ldrh	r2, [r7, #4]
 8000bac:	883b      	ldrh	r3, [r7, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	2b80      	cmp	r3, #128	@ 0x80
 8000bb2:	dc22      	bgt.n	8000bfa <SSD1351_DrawImage+0x84>

    SSD1351_Select();
 8000bb4:	f7ff fcdc 	bl	8000570 <SSD1351_Select>
    SSD1351_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000bb8:	88fa      	ldrh	r2, [r7, #6]
 8000bba:	887b      	ldrh	r3, [r7, #2]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	b29c      	uxth	r4, r3
 8000bc4:	88ba      	ldrh	r2, [r7, #4]
 8000bc6:	883b      	ldrh	r3, [r7, #0]
 8000bc8:	4413      	add	r3, r2
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	88b9      	ldrh	r1, [r7, #4]
 8000bd2:	88f8      	ldrh	r0, [r7, #6]
 8000bd4:	4622      	mov	r2, r4
 8000bd6:	f7ff fd4d 	bl	8000674 <SSD1351_SetAddressWindow>
    SSD1351_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	883a      	ldrh	r2, [r7, #0]
 8000bde:	fb02 f303 	mul.w	r3, r2, r3
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4619      	mov	r1, r3
 8000be6:	69b8      	ldr	r0, [r7, #24]
 8000be8:	f7ff fd16 	bl	8000618 <SSD1351_WriteData>
    SSD1351_Unselect();
 8000bec:	f7ff fccc 	bl	8000588 <SSD1351_Unselect>
 8000bf0:	e004      	b.n	8000bfc <SSD1351_DrawImage+0x86>
    if((x >= SSD1351_WIDTH) || (y >= SSD1351_HEIGHT)) return;
 8000bf2:	bf00      	nop
 8000bf4:	e002      	b.n	8000bfc <SSD1351_DrawImage+0x86>
    if((x + w - 1) >= SSD1351_WIDTH) return;
 8000bf6:	bf00      	nop
 8000bf8:	e000      	b.n	8000bfc <SSD1351_DrawImage+0x86>
    if((y + h - 1) >= SSD1351_HEIGHT) return;
 8000bfa:	bf00      	nop
}
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd90      	pop	{r4, r7, pc}

08000c02 <SSD1351_InvertColors>:

void SSD1351_InvertColors(bool invert) {
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	71fb      	strb	r3, [r7, #7]
    SSD1351_Select();
 8000c0c:	f7ff fcb0 	bl	8000570 <SSD1351_Select>
    SSD1351_WriteCommand(invert ? 0xA7 /* INVERTDISPLAY */ : 0xA6 /* NORMALDISPLAY */);
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SSD1351_InvertColors+0x18>
 8000c16:	23a7      	movs	r3, #167	@ 0xa7
 8000c18:	e000      	b.n	8000c1c <SSD1351_InvertColors+0x1a>
 8000c1a:	23a6      	movs	r3, #166	@ 0xa6
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fce1 	bl	80005e4 <SSD1351_WriteCommand>
    SSD1351_Unselect();
 8000c22:	f7ff fcb1 	bl	8000588 <SSD1351_Unselect>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <UART_Printf>:
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART2_UART_Init(void);


void UART_Printf(const char* fmt, ...) {
 8000c30:	b40f      	push	{r0, r1, r2, r3}
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b0c2      	sub	sp, #264	@ 0x108
 8000c36:	af00      	add	r7, sp, #0
    char buff[256];
    va_list args;
    va_start(args, fmt);
 8000c38:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8000c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c44:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 8000c46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c4e:	f107 0008 	add.w	r0, r7, #8
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000c58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c5c:	f003 fc04 	bl	8004468 <vsniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buff, strlen(buff),
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fab3 	bl	80001d0 <strlen>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	f107 0108 	add.w	r1, r7, #8
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	4805      	ldr	r0, [pc, #20]	@ (8000c8c <UART_Printf+0x5c>)
 8000c78:	f002 fe6e 	bl	8003958 <HAL_UART_Transmit>
                      HAL_MAX_DELAY);
    va_end(args);
}
 8000c7c:	bf00      	nop
 8000c7e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000c82:	46bd      	mov	sp, r7
 8000c84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr
 8000c8c:	200000f4 	.word	0x200000f4

08000c90 <init>:

void init() {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
    SSD1351_Unselect();
 8000c94:	f7ff fc78 	bl	8000588 <SSD1351_Unselect>
    SSD1351_Init();
 8000c98:	f7ff fd20 	bl	80006dc <SSD1351_Init>
    UART_Printf("Init done!\r\n");
 8000c9c:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <init+0x18>)
 8000c9e:	f7ff ffc7 	bl	8000c30 <UART_Printf>
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	08004da4 	.word	0x08004da4

08000cac <loop>:

void loop() {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af04      	add	r7, sp, #16
    // Check border
    SSD1351_FillScreen(SSD1351_BLACK);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f7ff ff4e 	bl	8000b54 <SSD1351_FillScreen>

    for(int x = 0; x < SSD1351_WIDTH; x++) {
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	e012      	b.n	8000ce4 <loop+0x38>
        SSD1351_DrawPixel(x, 0, SSD1351_RED);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fdeb 	bl	80008a4 <SSD1351_DrawPixel>
        SSD1351_DrawPixel(x, SSD1351_HEIGHT-1, SSD1351_RED);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000cd6:	217f      	movs	r1, #127	@ 0x7f
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fde3 	bl	80008a4 <SSD1351_DrawPixel>
    for(int x = 0; x < SSD1351_WIDTH; x++) {
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ce8:	dde9      	ble.n	8000cbe <loop+0x12>
    }

    for(int y = 0; y < SSD1351_HEIGHT; y++) {
 8000cea:	2300      	movs	r3, #0
 8000cec:	603b      	str	r3, [r7, #0]
 8000cee:	e012      	b.n	8000d16 <loop+0x6a>
        SSD1351_DrawPixel(0, y, SSD1351_RED);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff fdd2 	bl	80008a4 <SSD1351_DrawPixel>
        SSD1351_DrawPixel(SSD1351_WIDTH-1, y, SSD1351_RED);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000d08:	4619      	mov	r1, r3
 8000d0a:	207f      	movs	r0, #127	@ 0x7f
 8000d0c:	f7ff fdca 	bl	80008a4 <SSD1351_DrawPixel>
    for(int y = 0; y < SSD1351_HEIGHT; y++) {
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	3301      	adds	r3, #1
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d1a:	dde9      	ble.n	8000cf0 <loop+0x44>
    }

    HAL_Delay(3000);
 8000d1c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000d20:	f000 fc62 	bl	80015e8 <HAL_Delay>

    // Check fonts
    SSD1351_FillScreen(SSD1351_BLACK);
 8000d24:	2000      	movs	r0, #0
 8000d26:	f7ff ff15 	bl	8000b54 <SSD1351_FillScreen>
    SSD1351_WriteString(0, 0, "Font_7x10, red on black, lorem ipsum dolor sit amet", Font_7x10, SSD1351_RED, SSD1351_BLACK);
 8000d2a:	4b7c      	ldr	r3, [pc, #496]	@ (8000f1c <loop+0x270>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	9202      	str	r2, [sp, #8]
 8000d30:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000d34:	9201      	str	r2, [sp, #4]
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	9200      	str	r2, [sp, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a78      	ldr	r2, [pc, #480]	@ (8000f20 <loop+0x274>)
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2000      	movs	r0, #0
 8000d42:	f7ff fe51 	bl	80009e8 <SSD1351_WriteString>
    SSD1351_WriteString(0, 3*10, "Font_11x18, green, lorem ipsum", Font_11x18, SSD1351_GREEN, SSD1351_BLACK);
 8000d46:	4b77      	ldr	r3, [pc, #476]	@ (8000f24 <loop+0x278>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	9202      	str	r2, [sp, #8]
 8000d4c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000d50:	9201      	str	r2, [sp, #4]
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	9200      	str	r2, [sp, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a73      	ldr	r2, [pc, #460]	@ (8000f28 <loop+0x27c>)
 8000d5a:	211e      	movs	r1, #30
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff fe43 	bl	80009e8 <SSD1351_WriteString>
    SSD1351_WriteString(0, 3*10+3*18, "Font_16x26, blue, lorem ipsum dolor sit amet", Font_16x26, SSD1351_BLUE, SSD1351_BLACK);
 8000d62:	4b72      	ldr	r3, [pc, #456]	@ (8000f2c <loop+0x280>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	9202      	str	r2, [sp, #8]
 8000d68:	221f      	movs	r2, #31
 8000d6a:	9201      	str	r2, [sp, #4]
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	9200      	str	r2, [sp, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a6f      	ldr	r2, [pc, #444]	@ (8000f30 <loop+0x284>)
 8000d74:	2154      	movs	r1, #84	@ 0x54
 8000d76:	2000      	movs	r0, #0
 8000d78:	f7ff fe36 	bl	80009e8 <SSD1351_WriteString>

    HAL_Delay(1000);
 8000d7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d80:	f000 fc32 	bl	80015e8 <HAL_Delay>
    SSD1351_InvertColors(true);
 8000d84:	2001      	movs	r0, #1
 8000d86:	f7ff ff3c 	bl	8000c02 <SSD1351_InvertColors>
    HAL_Delay(1000);
 8000d8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d8e:	f000 fc2b 	bl	80015e8 <HAL_Delay>
    SSD1351_InvertColors(false);
 8000d92:	2000      	movs	r0, #0
 8000d94:	f7ff ff35 	bl	8000c02 <SSD1351_InvertColors>

    HAL_Delay(5000);
 8000d98:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000d9c:	f000 fc24 	bl	80015e8 <HAL_Delay>

    // Check colors
    SSD1351_FillScreen(SSD1351_WHITE);
 8000da0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000da4:	f7ff fed6 	bl	8000b54 <SSD1351_FillScreen>
    SSD1351_WriteString(0, 0, "WHITE", Font_11x18, SSD1351_BLACK, SSD1351_WHITE);
 8000da8:	4b5e      	ldr	r3, [pc, #376]	@ (8000f24 <loop+0x278>)
 8000daa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dae:	9202      	str	r2, [sp, #8]
 8000db0:	2200      	movs	r2, #0
 8000db2:	9201      	str	r2, [sp, #4]
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	9200      	str	r2, [sp, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a5e      	ldr	r2, [pc, #376]	@ (8000f34 <loop+0x288>)
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff fe12 	bl	80009e8 <SSD1351_WriteString>
    HAL_Delay(500);
 8000dc4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000dc8:	f000 fc0e 	bl	80015e8 <HAL_Delay>

    SSD1351_FillScreen(SSD1351_BLUE);
 8000dcc:	201f      	movs	r0, #31
 8000dce:	f7ff fec1 	bl	8000b54 <SSD1351_FillScreen>
    SSD1351_WriteString(0, 0, "BLUE", Font_11x18, SSD1351_BLACK, SSD1351_BLUE);
 8000dd2:	4b54      	ldr	r3, [pc, #336]	@ (8000f24 <loop+0x278>)
 8000dd4:	221f      	movs	r2, #31
 8000dd6:	9202      	str	r2, [sp, #8]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	9201      	str	r2, [sp, #4]
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	9200      	str	r2, [sp, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a55      	ldr	r2, [pc, #340]	@ (8000f38 <loop+0x28c>)
 8000de4:	2100      	movs	r1, #0
 8000de6:	2000      	movs	r0, #0
 8000de8:	f7ff fdfe 	bl	80009e8 <SSD1351_WriteString>
    HAL_Delay(500);
 8000dec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000df0:	f000 fbfa 	bl	80015e8 <HAL_Delay>

    SSD1351_FillScreen(SSD1351_RED);
 8000df4:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000df8:	f7ff feac 	bl	8000b54 <SSD1351_FillScreen>
    SSD1351_WriteString(0, 0, "RED", Font_11x18, SSD1351_BLACK, SSD1351_RED);
 8000dfc:	4b49      	ldr	r3, [pc, #292]	@ (8000f24 <loop+0x278>)
 8000dfe:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000e02:	9202      	str	r2, [sp, #8]
 8000e04:	2200      	movs	r2, #0
 8000e06:	9201      	str	r2, [sp, #4]
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	9200      	str	r2, [sp, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a4b      	ldr	r2, [pc, #300]	@ (8000f3c <loop+0x290>)
 8000e10:	2100      	movs	r1, #0
 8000e12:	2000      	movs	r0, #0
 8000e14:	f7ff fde8 	bl	80009e8 <SSD1351_WriteString>
    HAL_Delay(500);
 8000e18:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e1c:	f000 fbe4 	bl	80015e8 <HAL_Delay>

    SSD1351_FillScreen(SSD1351_GREEN);
 8000e20:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000e24:	f7ff fe96 	bl	8000b54 <SSD1351_FillScreen>
    SSD1351_WriteString(0, 0, "GREEN", Font_11x18, SSD1351_BLACK, SSD1351_GREEN);
 8000e28:	4b3e      	ldr	r3, [pc, #248]	@ (8000f24 <loop+0x278>)
 8000e2a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000e2e:	9202      	str	r2, [sp, #8]
 8000e30:	2200      	movs	r2, #0
 8000e32:	9201      	str	r2, [sp, #4]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	9200      	str	r2, [sp, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a41      	ldr	r2, [pc, #260]	@ (8000f40 <loop+0x294>)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f7ff fdd2 	bl	80009e8 <SSD1351_WriteString>
    HAL_Delay(500);
 8000e44:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e48:	f000 fbce 	bl	80015e8 <HAL_Delay>

    SSD1351_FillScreen(SSD1351_CYAN);
 8000e4c:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8000e50:	f7ff fe80 	bl	8000b54 <SSD1351_FillScreen>
    SSD1351_WriteString(0, 0, "CYAN", Font_11x18, SSD1351_BLACK, SSD1351_CYAN);
 8000e54:	4b33      	ldr	r3, [pc, #204]	@ (8000f24 <loop+0x278>)
 8000e56:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000e5a:	9202      	str	r2, [sp, #8]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	9201      	str	r2, [sp, #4]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	9200      	str	r2, [sp, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a37      	ldr	r2, [pc, #220]	@ (8000f44 <loop+0x298>)
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f7ff fdbc 	bl	80009e8 <SSD1351_WriteString>
    HAL_Delay(500);
 8000e70:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e74:	f000 fbb8 	bl	80015e8 <HAL_Delay>

    SSD1351_FillScreen(SSD1351_MAGENTA);
 8000e78:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8000e7c:	f7ff fe6a 	bl	8000b54 <SSD1351_FillScreen>
    SSD1351_WriteString(0, 0, "MAGENTA", Font_11x18, SSD1351_BLACK, SSD1351_MAGENTA);
 8000e80:	4b28      	ldr	r3, [pc, #160]	@ (8000f24 <loop+0x278>)
 8000e82:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8000e86:	9202      	str	r2, [sp, #8]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	9201      	str	r2, [sp, #4]
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	9200      	str	r2, [sp, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a2d      	ldr	r2, [pc, #180]	@ (8000f48 <loop+0x29c>)
 8000e94:	2100      	movs	r1, #0
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff fda6 	bl	80009e8 <SSD1351_WriteString>
    HAL_Delay(500);
 8000e9c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ea0:	f000 fba2 	bl	80015e8 <HAL_Delay>

    SSD1351_FillScreen(SSD1351_YELLOW);
 8000ea4:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8000ea8:	f7ff fe54 	bl	8000b54 <SSD1351_FillScreen>
    SSD1351_WriteString(0, 0, "YELLOW", Font_11x18, SSD1351_BLACK, SSD1351_YELLOW);
 8000eac:	4b1d      	ldr	r3, [pc, #116]	@ (8000f24 <loop+0x278>)
 8000eae:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000eb2:	9202      	str	r2, [sp, #8]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	9201      	str	r2, [sp, #4]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	9200      	str	r2, [sp, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a23      	ldr	r2, [pc, #140]	@ (8000f4c <loop+0x2a0>)
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f7ff fd90 	bl	80009e8 <SSD1351_WriteString>
    HAL_Delay(500);
 8000ec8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ecc:	f000 fb8c 	bl	80015e8 <HAL_Delay>

    SSD1351_FillScreen(SSD1351_BLACK);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f7ff fe3f 	bl	8000b54 <SSD1351_FillScreen>
    SSD1351_WriteString(0, 0, "BLACK", Font_11x18, SSD1351_WHITE, SSD1351_BLACK);
 8000ed6:	4b13      	ldr	r3, [pc, #76]	@ (8000f24 <loop+0x278>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	9202      	str	r2, [sp, #8]
 8000edc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ee0:	9201      	str	r2, [sp, #4]
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	9200      	str	r2, [sp, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a19      	ldr	r2, [pc, #100]	@ (8000f50 <loop+0x2a4>)
 8000eea:	2100      	movs	r1, #0
 8000eec:	2000      	movs	r0, #0
 8000eee:	f7ff fd7b 	bl	80009e8 <SSD1351_WriteString>
    HAL_Delay(500);
 8000ef2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ef6:	f000 fb77 	bl	80015e8 <HAL_Delay>

    SSD1351_DrawImage(0, 0, 128, 128, (const uint16_t*)test_img_128x128);
 8000efa:	4b16      	ldr	r3, [pc, #88]	@ (8000f54 <loop+0x2a8>)
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	2380      	movs	r3, #128	@ 0x80
 8000f00:	2280      	movs	r2, #128	@ 0x80
 8000f02:	2100      	movs	r1, #0
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff fe36 	bl	8000b76 <SSD1351_DrawImage>

    HAL_Delay(10000);
 8000f0a:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000f0e:	f000 fb6b 	bl	80015e8 <HAL_Delay>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	08004db4 	.word	0x08004db4
 8000f24:	20000008 	.word	0x20000008
 8000f28:	08004de8 	.word	0x08004de8
 8000f2c:	20000010 	.word	0x20000010
 8000f30:	08004e08 	.word	0x08004e08
 8000f34:	08004e38 	.word	0x08004e38
 8000f38:	08004e40 	.word	0x08004e40
 8000f3c:	08004e48 	.word	0x08004e48
 8000f40:	08004e4c 	.word	0x08004e4c
 8000f44:	08004e54 	.word	0x08004e54
 8000f48:	08004e5c 	.word	0x08004e5c
 8000f4c:	08004e64 	.word	0x08004e64
 8000f50:	08004e6c 	.word	0x08004e6c
 8000f54:	08007688 	.word	0x08007688

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5c:	f000 fac8 	bl	80014f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f60:	f000 f80b 	bl	8000f7a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f64:	f000 f8c8 	bl	80010f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f68:	f000 f896 	bl	8001098 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000f6c:	f000 f856 	bl	800101c <MX_SPI2_Init>

  /* USER CODE BEGIN 2 */
  init();
 8000f70:	f7ff fe8e 	bl	8000c90 <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	loop();
 8000f74:	f7ff fe9a 	bl	8000cac <loop>
 8000f78:	e7fc      	b.n	8000f74 <main+0x1c>

08000f7a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b096      	sub	sp, #88	@ 0x58
 8000f7e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2244      	movs	r2, #68	@ 0x44
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f003 fa7b 	bl	8004484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8e:	463b      	mov	r3, r7
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f9c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fa0:	f000 fdfc 	bl	8001b9c <HAL_PWREx_ControlVoltageScaling>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000faa:	f000 f935 	bl	8001218 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb8:	2310      	movs	r3, #16
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fc8:	230a      	movs	r3, #10
 8000fca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fcc:	2307      	movs	r3, #7
 8000fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 fe33 	bl	8001c48 <HAL_RCC_OscConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fe8:	f000 f916 	bl	8001218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fec:	230f      	movs	r3, #15
 8000fee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001000:	463b      	mov	r3, r7
 8001002:	2104      	movs	r1, #4
 8001004:	4618      	mov	r0, r3
 8001006:	f001 f9fb 	bl	8002400 <HAL_RCC_ClockConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001010:	f000 f902 	bl	8001218 <Error_Handler>
  }
}
 8001014:	bf00      	nop
 8001016:	3758      	adds	r7, #88	@ 0x58
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001020:	4b1b      	ldr	r3, [pc, #108]	@ (8001090 <MX_SPI2_Init+0x74>)
 8001022:	4a1c      	ldr	r2, [pc, #112]	@ (8001094 <MX_SPI2_Init+0x78>)
 8001024:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001026:	4b1a      	ldr	r3, [pc, #104]	@ (8001090 <MX_SPI2_Init+0x74>)
 8001028:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800102c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800102e:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <MX_SPI2_Init+0x74>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001034:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <MX_SPI2_Init+0x74>)
 8001036:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800103a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800103c:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <MX_SPI2_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <MX_SPI2_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001048:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <MX_SPI2_Init+0x74>)
 800104a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800104e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001050:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <MX_SPI2_Init+0x74>)
 8001052:	2210      	movs	r2, #16
 8001054:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001056:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <MX_SPI2_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800105c:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <MX_SPI2_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <MX_SPI2_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001068:	4b09      	ldr	r3, [pc, #36]	@ (8001090 <MX_SPI2_Init+0x74>)
 800106a:	2207      	movs	r2, #7
 800106c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800106e:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <MX_SPI2_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <MX_SPI2_Init+0x74>)
 8001076:	2208      	movs	r2, #8
 8001078:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	@ (8001090 <MX_SPI2_Init+0x74>)
 800107c:	f002 f8a0 	bl	80031c0 <HAL_SPI_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001086:	f000 f8c7 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000090 	.word	0x20000090
 8001094:	40003800 	.word	0x40003800

08001098 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800109c:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <MX_USART2_UART_Init+0x58>)
 800109e:	4a15      	ldr	r2, [pc, #84]	@ (80010f4 <MX_USART2_UART_Init+0x5c>)
 80010a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010a2:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <MX_USART2_UART_Init+0x58>)
 80010a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010aa:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <MX_USART2_UART_Init+0x58>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <MX_USART2_UART_Init+0x58>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <MX_USART2_UART_Init+0x58>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	@ (80010f0 <MX_USART2_UART_Init+0x58>)
 80010be:	220c      	movs	r2, #12
 80010c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <MX_USART2_UART_Init+0x58>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c8:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <MX_USART2_UART_Init+0x58>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ce:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <MX_USART2_UART_Init+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <MX_USART2_UART_Init+0x58>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	@ (80010f0 <MX_USART2_UART_Init+0x58>)
 80010dc:	f002 fbee 	bl	80038bc <HAL_UART_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010e6:	f000 f897 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200000f4 	.word	0x200000f4
 80010f4:	40004400 	.word	0x40004400

080010f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	@ 0x28
 80010fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	4b3f      	ldr	r3, [pc, #252]	@ (800120c <MX_GPIO_Init+0x114>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001112:	4a3e      	ldr	r2, [pc, #248]	@ (800120c <MX_GPIO_Init+0x114>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111a:	4b3c      	ldr	r3, [pc, #240]	@ (800120c <MX_GPIO_Init+0x114>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001126:	4b39      	ldr	r3, [pc, #228]	@ (800120c <MX_GPIO_Init+0x114>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	4a38      	ldr	r2, [pc, #224]	@ (800120c <MX_GPIO_Init+0x114>)
 800112c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001130:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001132:	4b36      	ldr	r3, [pc, #216]	@ (800120c <MX_GPIO_Init+0x114>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4b33      	ldr	r3, [pc, #204]	@ (800120c <MX_GPIO_Init+0x114>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	4a32      	ldr	r2, [pc, #200]	@ (800120c <MX_GPIO_Init+0x114>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114a:	4b30      	ldr	r3, [pc, #192]	@ (800120c <MX_GPIO_Init+0x114>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	4b2d      	ldr	r3, [pc, #180]	@ (800120c <MX_GPIO_Init+0x114>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	4a2c      	ldr	r2, [pc, #176]	@ (800120c <MX_GPIO_Init+0x114>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001162:	4b2a      	ldr	r3, [pc, #168]	@ (800120c <MX_GPIO_Init+0x114>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DC_Pin_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8001174:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001178:	f000 fcea 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RES_Pin_GPIO_Port, RES_Pin_Pin, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2180      	movs	r1, #128	@ 0x80
 8001180:	4823      	ldr	r0, [pc, #140]	@ (8001210 <MX_GPIO_Init+0x118>)
 8001182:	f000 fce5 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_Pin_GPIO_Port, CS_Pin_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2140      	movs	r1, #64	@ 0x40
 800118a:	4822      	ldr	r0, [pc, #136]	@ (8001214 <MX_GPIO_Init+0x11c>)
 800118c:	f000 fce0 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001190:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001196:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800119a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	481a      	ldr	r0, [pc, #104]	@ (8001210 <MX_GPIO_Init+0x118>)
 80011a8:	f000 fb28 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DC_Pin_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DC_Pin_Pin;
 80011ac:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80011b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c8:	f000 fb18 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pin : RES_Pin_Pin */
  GPIO_InitStruct.Pin = RES_Pin_Pin;
 80011cc:	2380      	movs	r3, #128	@ 0x80
 80011ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RES_Pin_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	480b      	ldr	r0, [pc, #44]	@ (8001210 <MX_GPIO_Init+0x118>)
 80011e4:	f000 fb0a 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin_Pin */
  GPIO_InitStruct.Pin = CS_Pin_Pin;
 80011e8:	2340      	movs	r3, #64	@ 0x40
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_Pin_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4805      	ldr	r0, [pc, #20]	@ (8001214 <MX_GPIO_Init+0x11c>)
 8001200:	f000 fafc 	bl	80017fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	@ 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40021000 	.word	0x40021000
 8001210:	48000800 	.word	0x48000800
 8001214:	48000400 	.word	0x48000400

08001218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800121c:	b672      	cpsid	i
}
 800121e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <Error_Handler+0x8>

08001224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <HAL_MspInit+0x44>)
 800122c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800122e:	4a0e      	ldr	r2, [pc, #56]	@ (8001268 <HAL_MspInit+0x44>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6613      	str	r3, [r2, #96]	@ 0x60
 8001236:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <HAL_MspInit+0x44>)
 8001238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <HAL_MspInit+0x44>)
 8001244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001246:	4a08      	ldr	r2, [pc, #32]	@ (8001268 <HAL_MspInit+0x44>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124c:	6593      	str	r3, [r2, #88]	@ 0x58
 800124e:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <HAL_MspInit+0x44>)
 8001250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000

0800126c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	@ 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a17      	ldr	r2, [pc, #92]	@ (80012e8 <HAL_SPI_MspInit+0x7c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d128      	bne.n	80012e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800128e:	4b17      	ldr	r3, [pc, #92]	@ (80012ec <HAL_SPI_MspInit+0x80>)
 8001290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001292:	4a16      	ldr	r2, [pc, #88]	@ (80012ec <HAL_SPI_MspInit+0x80>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001298:	6593      	str	r3, [r2, #88]	@ 0x58
 800129a:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <HAL_SPI_MspInit+0x80>)
 800129c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <HAL_SPI_MspInit+0x80>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012aa:	4a10      	ldr	r2, [pc, #64]	@ (80012ec <HAL_SPI_MspInit+0x80>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <HAL_SPI_MspInit+0x80>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80012be:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80012c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012cc:	2303      	movs	r3, #3
 80012ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012d0:	2305      	movs	r3, #5
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	4805      	ldr	r0, [pc, #20]	@ (80012f0 <HAL_SPI_MspInit+0x84>)
 80012dc:	f000 fa8e 	bl	80017fc <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	@ 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40003800 	.word	0x40003800
 80012ec:	40021000 	.word	0x40021000
 80012f0:	48000400 	.word	0x48000400

080012f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b0ac      	sub	sp, #176	@ 0xb0
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2288      	movs	r2, #136	@ 0x88
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f003 f8b5 	bl	8004484 <memset>
  if(huart->Instance==USART2)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a21      	ldr	r2, [pc, #132]	@ (80013a4 <HAL_UART_MspInit+0xb0>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d13b      	bne.n	800139c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001324:	2302      	movs	r3, #2
 8001326:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001328:	2300      	movs	r3, #0
 800132a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4618      	mov	r0, r3
 8001332:	f001 fa89 	bl	8002848 <HAL_RCCEx_PeriphCLKConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800133c:	f7ff ff6c 	bl	8001218 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001340:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <HAL_UART_MspInit+0xb4>)
 8001342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001344:	4a18      	ldr	r2, [pc, #96]	@ (80013a8 <HAL_UART_MspInit+0xb4>)
 8001346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800134a:	6593      	str	r3, [r2, #88]	@ 0x58
 800134c:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <HAL_UART_MspInit+0xb4>)
 800134e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <HAL_UART_MspInit+0xb4>)
 800135a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135c:	4a12      	ldr	r2, [pc, #72]	@ (80013a8 <HAL_UART_MspInit+0xb4>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001364:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <HAL_UART_MspInit+0xb4>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001370:	230c      	movs	r3, #12
 8001372:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001382:	2303      	movs	r3, #3
 8001384:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001388:	2307      	movs	r3, #7
 800138a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001392:	4619      	mov	r1, r3
 8001394:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001398:	f000 fa30 	bl	80017fc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800139c:	bf00      	nop
 800139e:	37b0      	adds	r7, #176	@ 0xb0
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40004400 	.word	0x40004400
 80013a8:	40021000 	.word	0x40021000

080013ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <NMI_Handler+0x4>

080013b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <HardFault_Handler+0x4>

080013bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <MemManage_Handler+0x4>

080013c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <BusFault_Handler+0x4>

080013cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <UsageFault_Handler+0x4>

080013d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001402:	f000 f8d1 	bl	80015a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001414:	4a14      	ldr	r2, [pc, #80]	@ (8001468 <_sbrk+0x5c>)
 8001416:	4b15      	ldr	r3, [pc, #84]	@ (800146c <_sbrk+0x60>)
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001420:	4b13      	ldr	r3, [pc, #76]	@ (8001470 <_sbrk+0x64>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d102      	bne.n	800142e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <_sbrk+0x64>)
 800142a:	4a12      	ldr	r2, [pc, #72]	@ (8001474 <_sbrk+0x68>)
 800142c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142e:	4b10      	ldr	r3, [pc, #64]	@ (8001470 <_sbrk+0x64>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	429a      	cmp	r2, r3
 800143a:	d207      	bcs.n	800144c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800143c:	f003 f82a 	bl	8004494 <__errno>
 8001440:	4603      	mov	r3, r0
 8001442:	220c      	movs	r2, #12
 8001444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	e009      	b.n	8001460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800144c:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <_sbrk+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001452:	4b07      	ldr	r3, [pc, #28]	@ (8001470 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	4a05      	ldr	r2, [pc, #20]	@ (8001470 <_sbrk+0x64>)
 800145c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800145e:	68fb      	ldr	r3, [r7, #12]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20018000 	.word	0x20018000
 800146c:	00000400 	.word	0x00000400
 8001470:	2000017c 	.word	0x2000017c
 8001474:	200002d0 	.word	0x200002d0

08001478 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <SystemInit+0x20>)
 800147e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001482:	4a05      	ldr	r2, [pc, #20]	@ (8001498 <SystemInit+0x20>)
 8001484:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001488:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800149c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014a0:	f7ff ffea 	bl	8001478 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a4:	480c      	ldr	r0, [pc, #48]	@ (80014d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80014a6:	490d      	ldr	r1, [pc, #52]	@ (80014dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80014a8:	4a0d      	ldr	r2, [pc, #52]	@ (80014e0 <LoopForever+0xe>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ac:	e002      	b.n	80014b4 <LoopCopyDataInit>

080014ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b2:	3304      	adds	r3, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b8:	d3f9      	bcc.n	80014ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ba:	4a0a      	ldr	r2, [pc, #40]	@ (80014e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014bc:	4c0a      	ldr	r4, [pc, #40]	@ (80014e8 <LoopForever+0x16>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c0:	e001      	b.n	80014c6 <LoopFillZerobss>

080014c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c4:	3204      	adds	r2, #4

080014c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c8:	d3fb      	bcc.n	80014c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ca:	f002 ffe9 	bl	80044a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ce:	f7ff fd43 	bl	8000f58 <main>

080014d2 <LoopForever>:

LoopForever:
    b LoopForever
 80014d2:	e7fe      	b.n	80014d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014dc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80014e0:	0800f714 	.word	0x0800f714
  ldr r2, =_sbss
 80014e4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80014e8:	200002cc 	.word	0x200002cc

080014ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014ec:	e7fe      	b.n	80014ec <ADC1_2_IRQHandler>
	...

080014f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fa:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <HAL_Init+0x3c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a0b      	ldr	r2, [pc, #44]	@ (800152c <HAL_Init+0x3c>)
 8001500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001504:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001506:	2003      	movs	r0, #3
 8001508:	f000 f944 	bl	8001794 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800150c:	2000      	movs	r0, #0
 800150e:	f000 f80f 	bl	8001530 <HAL_InitTick>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d002      	beq.n	800151e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	71fb      	strb	r3, [r7, #7]
 800151c:	e001      	b.n	8001522 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800151e:	f7ff fe81 	bl	8001224 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001522:	79fb      	ldrb	r3, [r7, #7]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40022000 	.word	0x40022000

08001530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800153c:	4b17      	ldr	r3, [pc, #92]	@ (800159c <HAL_InitTick+0x6c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d023      	beq.n	800158c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001544:	4b16      	ldr	r3, [pc, #88]	@ (80015a0 <HAL_InitTick+0x70>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b14      	ldr	r3, [pc, #80]	@ (800159c <HAL_InitTick+0x6c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4619      	mov	r1, r3
 800154e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001552:	fbb3 f3f1 	udiv	r3, r3, r1
 8001556:	fbb2 f3f3 	udiv	r3, r2, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f000 f941 	bl	80017e2 <HAL_SYSTICK_Config>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10f      	bne.n	8001586 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b0f      	cmp	r3, #15
 800156a:	d809      	bhi.n	8001580 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156c:	2200      	movs	r2, #0
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f000 f919 	bl	80017aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001578:	4a0a      	ldr	r2, [pc, #40]	@ (80015a4 <HAL_InitTick+0x74>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	e007      	b.n	8001590 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
 8001584:	e004      	b.n	8001590 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	73fb      	strb	r3, [r7, #15]
 800158a:	e001      	b.n	8001590 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000020 	.word	0x20000020
 80015a0:	20000018 	.word	0x20000018
 80015a4:	2000001c 	.word	0x2000001c

080015a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <HAL_IncTick+0x20>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <HAL_IncTick+0x24>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	4a04      	ldr	r2, [pc, #16]	@ (80015cc <HAL_IncTick+0x24>)
 80015ba:	6013      	str	r3, [r2, #0]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000020 	.word	0x20000020
 80015cc:	20000180 	.word	0x20000180

080015d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b03      	ldr	r3, [pc, #12]	@ (80015e4 <HAL_GetTick+0x14>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000180 	.word	0x20000180

080015e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff ffee 	bl	80015d0 <HAL_GetTick>
 80015f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001600:	d005      	beq.n	800160e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001602:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <HAL_Delay+0x44>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800160e:	bf00      	nop
 8001610:	f7ff ffde 	bl	80015d0 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	429a      	cmp	r2, r3
 800161e:	d8f7      	bhi.n	8001610 <HAL_Delay+0x28>
  {
  }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000020 	.word	0x20000020

08001630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001640:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800164c:	4013      	ands	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001658:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800165c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001662:	4a04      	ldr	r2, [pc, #16]	@ (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	60d3      	str	r3, [r2, #12]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800167c:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <__NVIC_GetPriorityGrouping+0x18>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	f003 0307 	and.w	r3, r3, #7
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	db0a      	blt.n	80016be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	490c      	ldr	r1, [pc, #48]	@ (80016e0 <__NVIC_SetPriority+0x4c>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	0112      	lsls	r2, r2, #4
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	440b      	add	r3, r1
 80016b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016bc:	e00a      	b.n	80016d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4908      	ldr	r1, [pc, #32]	@ (80016e4 <__NVIC_SetPriority+0x50>)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	3b04      	subs	r3, #4
 80016cc:	0112      	lsls	r2, r2, #4
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	440b      	add	r3, r1
 80016d2:	761a      	strb	r2, [r3, #24]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000e100 	.word	0xe000e100
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	@ 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f1c3 0307 	rsb	r3, r3, #7
 8001702:	2b04      	cmp	r3, #4
 8001704:	bf28      	it	cs
 8001706:	2304      	movcs	r3, #4
 8001708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3304      	adds	r3, #4
 800170e:	2b06      	cmp	r3, #6
 8001710:	d902      	bls.n	8001718 <NVIC_EncodePriority+0x30>
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3b03      	subs	r3, #3
 8001716:	e000      	b.n	800171a <NVIC_EncodePriority+0x32>
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	f04f 32ff 	mov.w	r2, #4294967295
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	401a      	ands	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001730:	f04f 31ff 	mov.w	r1, #4294967295
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	43d9      	mvns	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	4313      	orrs	r3, r2
         );
}
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	@ 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001760:	d301      	bcc.n	8001766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001762:	2301      	movs	r3, #1
 8001764:	e00f      	b.n	8001786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001766:	4a0a      	ldr	r2, [pc, #40]	@ (8001790 <SysTick_Config+0x40>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176e:	210f      	movs	r1, #15
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	f7ff ff8e 	bl	8001694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001778:	4b05      	ldr	r3, [pc, #20]	@ (8001790 <SysTick_Config+0x40>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177e:	4b04      	ldr	r3, [pc, #16]	@ (8001790 <SysTick_Config+0x40>)
 8001780:	2207      	movs	r2, #7
 8001782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	e000e010 	.word	0xe000e010

08001794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff47 	bl	8001630 <__NVIC_SetPriorityGrouping>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017bc:	f7ff ff5c 	bl	8001678 <__NVIC_GetPriorityGrouping>
 80017c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	6978      	ldr	r0, [r7, #20]
 80017c8:	f7ff ff8e 	bl	80016e8 <NVIC_EncodePriority>
 80017cc:	4602      	mov	r2, r0
 80017ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff5d 	bl	8001694 <__NVIC_SetPriority>
}
 80017da:	bf00      	nop
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ffb0 	bl	8001750 <SysTick_Config>
 80017f0:	4603      	mov	r3, r0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b087      	sub	sp, #28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180a:	e17f      	b.n	8001b0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	2101      	movs	r1, #1
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	fa01 f303 	lsl.w	r3, r1, r3
 8001818:	4013      	ands	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 8171 	beq.w	8001b06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	2b01      	cmp	r3, #1
 800182e:	d005      	beq.n	800183c <HAL_GPIO_Init+0x40>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d130      	bne.n	800189e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	2203      	movs	r2, #3
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001872:	2201      	movs	r2, #1
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	091b      	lsrs	r3, r3, #4
 8001888:	f003 0201 	and.w	r2, r3, #1
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d118      	bne.n	80018dc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018b0:	2201      	movs	r2, #1
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	08db      	lsrs	r3, r3, #3
 80018c6:	f003 0201 	and.w	r2, r3, #1
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d017      	beq.n	8001918 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	2203      	movs	r2, #3
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d123      	bne.n	800196c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	08da      	lsrs	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3208      	adds	r2, #8
 800192c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	220f      	movs	r2, #15
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	08da      	lsrs	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3208      	adds	r2, #8
 8001966:	6939      	ldr	r1, [r7, #16]
 8001968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0203 	and.w	r2, r3, #3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80ac 	beq.w	8001b06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	4b5f      	ldr	r3, [pc, #380]	@ (8001b2c <HAL_GPIO_Init+0x330>)
 80019b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b2:	4a5e      	ldr	r2, [pc, #376]	@ (8001b2c <HAL_GPIO_Init+0x330>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80019ba:	4b5c      	ldr	r3, [pc, #368]	@ (8001b2c <HAL_GPIO_Init+0x330>)
 80019bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019c6:	4a5a      	ldr	r2, [pc, #360]	@ (8001b30 <HAL_GPIO_Init+0x334>)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	089b      	lsrs	r3, r3, #2
 80019cc:	3302      	adds	r3, #2
 80019ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	220f      	movs	r2, #15
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019f0:	d025      	beq.n	8001a3e <HAL_GPIO_Init+0x242>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001b34 <HAL_GPIO_Init+0x338>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d01f      	beq.n	8001a3a <HAL_GPIO_Init+0x23e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001b38 <HAL_GPIO_Init+0x33c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d019      	beq.n	8001a36 <HAL_GPIO_Init+0x23a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4d      	ldr	r2, [pc, #308]	@ (8001b3c <HAL_GPIO_Init+0x340>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d013      	beq.n	8001a32 <HAL_GPIO_Init+0x236>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4c      	ldr	r2, [pc, #304]	@ (8001b40 <HAL_GPIO_Init+0x344>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d00d      	beq.n	8001a2e <HAL_GPIO_Init+0x232>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4b      	ldr	r2, [pc, #300]	@ (8001b44 <HAL_GPIO_Init+0x348>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d007      	beq.n	8001a2a <HAL_GPIO_Init+0x22e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a4a      	ldr	r2, [pc, #296]	@ (8001b48 <HAL_GPIO_Init+0x34c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d101      	bne.n	8001a26 <HAL_GPIO_Init+0x22a>
 8001a22:	2306      	movs	r3, #6
 8001a24:	e00c      	b.n	8001a40 <HAL_GPIO_Init+0x244>
 8001a26:	2307      	movs	r3, #7
 8001a28:	e00a      	b.n	8001a40 <HAL_GPIO_Init+0x244>
 8001a2a:	2305      	movs	r3, #5
 8001a2c:	e008      	b.n	8001a40 <HAL_GPIO_Init+0x244>
 8001a2e:	2304      	movs	r3, #4
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x244>
 8001a32:	2303      	movs	r3, #3
 8001a34:	e004      	b.n	8001a40 <HAL_GPIO_Init+0x244>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e002      	b.n	8001a40 <HAL_GPIO_Init+0x244>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <HAL_GPIO_Init+0x244>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	f002 0203 	and.w	r2, r2, #3
 8001a46:	0092      	lsls	r2, r2, #2
 8001a48:	4093      	lsls	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a50:	4937      	ldr	r1, [pc, #220]	@ (8001b30 <HAL_GPIO_Init+0x334>)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	3302      	adds	r3, #2
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b4c <HAL_GPIO_Init+0x350>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a82:	4a32      	ldr	r2, [pc, #200]	@ (8001b4c <HAL_GPIO_Init+0x350>)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a88:	4b30      	ldr	r3, [pc, #192]	@ (8001b4c <HAL_GPIO_Init+0x350>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aac:	4a27      	ldr	r2, [pc, #156]	@ (8001b4c <HAL_GPIO_Init+0x350>)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ab2:	4b26      	ldr	r3, [pc, #152]	@ (8001b4c <HAL_GPIO_Init+0x350>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ad6:	4a1d      	ldr	r2, [pc, #116]	@ (8001b4c <HAL_GPIO_Init+0x350>)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <HAL_GPIO_Init+0x350>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b00:	4a12      	ldr	r2, [pc, #72]	@ (8001b4c <HAL_GPIO_Init+0x350>)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa22 f303 	lsr.w	r3, r2, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f47f ae78 	bne.w	800180c <HAL_GPIO_Init+0x10>
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	371c      	adds	r7, #28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010000 	.word	0x40010000
 8001b34:	48000400 	.word	0x48000400
 8001b38:	48000800 	.word	0x48000800
 8001b3c:	48000c00 	.word	0x48000c00
 8001b40:	48001000 	.word	0x48001000
 8001b44:	48001400 	.word	0x48001400
 8001b48:	48001800 	.word	0x48001800
 8001b4c:	40010400 	.word	0x40010400

08001b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	807b      	strh	r3, [r7, #2]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b60:	787b      	ldrb	r3, [r7, #1]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b66:	887a      	ldrh	r2, [r7, #2]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b6c:	e002      	b.n	8001b74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b6e:	887a      	ldrh	r2, [r7, #2]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b84:	4b04      	ldr	r3, [pc, #16]	@ (8001b98 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40007000 	.word	0x40007000

08001b9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001baa:	d130      	bne.n	8001c0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bac:	4b23      	ldr	r3, [pc, #140]	@ (8001c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bb8:	d038      	beq.n	8001c2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bba:	4b20      	ldr	r3, [pc, #128]	@ (8001c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8001c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bca:	4b1d      	ldr	r3, [pc, #116]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2232      	movs	r2, #50	@ 0x32
 8001bd0:	fb02 f303 	mul.w	r3, r2, r3
 8001bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bda:	0c9b      	lsrs	r3, r3, #18
 8001bdc:	3301      	adds	r3, #1
 8001bde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001be0:	e002      	b.n	8001be8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001be8:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bf4:	d102      	bne.n	8001bfc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1f2      	bne.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c08:	d110      	bne.n	8001c2c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e00f      	b.n	8001c2e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c1a:	d007      	beq.n	8001c2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c1c:	4b07      	ldr	r3, [pc, #28]	@ (8001c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c24:	4a05      	ldr	r2, [pc, #20]	@ (8001c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40007000 	.word	0x40007000
 8001c40:	20000018 	.word	0x20000018
 8001c44:	431bde83 	.word	0x431bde83

08001c48 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e3ca      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c5a:	4b97      	ldr	r3, [pc, #604]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c64:	4b94      	ldr	r3, [pc, #592]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0310 	and.w	r3, r3, #16
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 80e4 	beq.w	8001e44 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d007      	beq.n	8001c92 <HAL_RCC_OscConfig+0x4a>
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	2b0c      	cmp	r3, #12
 8001c86:	f040 808b 	bne.w	8001da0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	f040 8087 	bne.w	8001da0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c92:	4b89      	ldr	r3, [pc, #548]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d005      	beq.n	8001caa <HAL_RCC_OscConfig+0x62>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e3a2      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a1a      	ldr	r2, [r3, #32]
 8001cae:	4b82      	ldr	r3, [pc, #520]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d004      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x7c>
 8001cba:	4b7f      	ldr	r3, [pc, #508]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cc2:	e005      	b.n	8001cd0 <HAL_RCC_OscConfig+0x88>
 8001cc4:	4b7c      	ldr	r3, [pc, #496]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cca:	091b      	lsrs	r3, r3, #4
 8001ccc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d223      	bcs.n	8001d1c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 fd55 	bl	8002788 <RCC_SetFlashLatencyFromMSIRange>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e383      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ce8:	4b73      	ldr	r3, [pc, #460]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a72      	ldr	r2, [pc, #456]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001cee:	f043 0308 	orr.w	r3, r3, #8
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	4b70      	ldr	r3, [pc, #448]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	496d      	ldr	r1, [pc, #436]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d06:	4b6c      	ldr	r3, [pc, #432]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	4968      	ldr	r1, [pc, #416]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	604b      	str	r3, [r1, #4]
 8001d1a:	e025      	b.n	8001d68 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d1c:	4b66      	ldr	r3, [pc, #408]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a65      	ldr	r2, [pc, #404]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001d22:	f043 0308 	orr.w	r3, r3, #8
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	4b63      	ldr	r3, [pc, #396]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	4960      	ldr	r1, [pc, #384]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d3a:	4b5f      	ldr	r3, [pc, #380]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	021b      	lsls	r3, r3, #8
 8001d48:	495b      	ldr	r1, [pc, #364]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d109      	bne.n	8001d68 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 fd15 	bl	8002788 <RCC_SetFlashLatencyFromMSIRange>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e343      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d68:	f000 fc4a 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	4b52      	ldr	r3, [pc, #328]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	091b      	lsrs	r3, r3, #4
 8001d74:	f003 030f 	and.w	r3, r3, #15
 8001d78:	4950      	ldr	r1, [pc, #320]	@ (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001d7a:	5ccb      	ldrb	r3, [r1, r3]
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	fa22 f303 	lsr.w	r3, r2, r3
 8001d84:	4a4e      	ldr	r2, [pc, #312]	@ (8001ec0 <HAL_RCC_OscConfig+0x278>)
 8001d86:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d88:	4b4e      	ldr	r3, [pc, #312]	@ (8001ec4 <HAL_RCC_OscConfig+0x27c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fbcf 	bl	8001530 <HAL_InitTick>
 8001d92:	4603      	mov	r3, r0
 8001d94:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d052      	beq.n	8001e42 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	e327      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d032      	beq.n	8001e0e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001da8:	4b43      	ldr	r3, [pc, #268]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a42      	ldr	r2, [pc, #264]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001db4:	f7ff fc0c 	bl	80015d0 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dbc:	f7ff fc08 	bl	80015d0 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e310      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dce:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dda:	4b37      	ldr	r3, [pc, #220]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a36      	ldr	r2, [pc, #216]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001de0:	f043 0308 	orr.w	r3, r3, #8
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	4b34      	ldr	r3, [pc, #208]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4931      	ldr	r1, [pc, #196]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001df8:	4b2f      	ldr	r3, [pc, #188]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	492c      	ldr	r1, [pc, #176]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	604b      	str	r3, [r1, #4]
 8001e0c:	e01a      	b.n	8001e44 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a29      	ldr	r2, [pc, #164]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001e14:	f023 0301 	bic.w	r3, r3, #1
 8001e18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e1a:	f7ff fbd9 	bl	80015d0 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e22:	f7ff fbd5 	bl	80015d0 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e2dd      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e34:	4b20      	ldr	r3, [pc, #128]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1f0      	bne.n	8001e22 <HAL_RCC_OscConfig+0x1da>
 8001e40:	e000      	b.n	8001e44 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e42:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d074      	beq.n	8001f3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d005      	beq.n	8001e62 <HAL_RCC_OscConfig+0x21a>
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	2b0c      	cmp	r3, #12
 8001e5a:	d10e      	bne.n	8001e7a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d10b      	bne.n	8001e7a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e62:	4b15      	ldr	r3, [pc, #84]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d064      	beq.n	8001f38 <HAL_RCC_OscConfig+0x2f0>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d160      	bne.n	8001f38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e2ba      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e82:	d106      	bne.n	8001e92 <HAL_RCC_OscConfig+0x24a>
 8001e84:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	e026      	b.n	8001ee0 <HAL_RCC_OscConfig+0x298>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e9a:	d115      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x280>
 8001e9c:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a05      	ldr	r2, [pc, #20]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001ea2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ea6:	6013      	str	r3, [r2, #0]
 8001ea8:	4b03      	ldr	r3, [pc, #12]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a02      	ldr	r2, [pc, #8]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001eae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	e014      	b.n	8001ee0 <HAL_RCC_OscConfig+0x298>
 8001eb6:	bf00      	nop
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	0800f688 	.word	0x0800f688
 8001ec0:	20000018 	.word	0x20000018
 8001ec4:	2000001c 	.word	0x2000001c
 8001ec8:	4ba0      	ldr	r3, [pc, #640]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a9f      	ldr	r2, [pc, #636]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8001ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	4b9d      	ldr	r3, [pc, #628]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a9c      	ldr	r2, [pc, #624]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8001eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d013      	beq.n	8001f10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7ff fb72 	bl	80015d0 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef0:	f7ff fb6e 	bl	80015d0 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	@ 0x64
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e276      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f02:	4b92      	ldr	r3, [pc, #584]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x2a8>
 8001f0e:	e014      	b.n	8001f3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f10:	f7ff fb5e 	bl	80015d0 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f18:	f7ff fb5a 	bl	80015d0 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	@ 0x64
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e262      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f2a:	4b88      	ldr	r3, [pc, #544]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x2d0>
 8001f36:	e000      	b.n	8001f3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d060      	beq.n	8002008 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_OscConfig+0x310>
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	2b0c      	cmp	r3, #12
 8001f50:	d119      	bne.n	8001f86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d116      	bne.n	8001f86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f58:	4b7c      	ldr	r3, [pc, #496]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_OscConfig+0x328>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e23f      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f70:	4b76      	ldr	r3, [pc, #472]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	061b      	lsls	r3, r3, #24
 8001f7e:	4973      	ldr	r1, [pc, #460]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f84:	e040      	b.n	8002008 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d023      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f8e:	4b6f      	ldr	r3, [pc, #444]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a6e      	ldr	r2, [pc, #440]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8001f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9a:	f7ff fb19 	bl	80015d0 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa2:	f7ff fb15 	bl	80015d0 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e21d      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb4:	4b65      	ldr	r3, [pc, #404]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc0:	4b62      	ldr	r3, [pc, #392]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	061b      	lsls	r3, r3, #24
 8001fce:	495f      	ldr	r1, [pc, #380]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]
 8001fd4:	e018      	b.n	8002008 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd6:	4b5d      	ldr	r3, [pc, #372]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a5c      	ldr	r2, [pc, #368]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8001fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe2:	f7ff faf5 	bl	80015d0 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fea:	f7ff faf1 	bl	80015d0 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e1f9      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ffc:	4b53      	ldr	r3, [pc, #332]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f0      	bne.n	8001fea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	2b00      	cmp	r3, #0
 8002012:	d03c      	beq.n	800208e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d01c      	beq.n	8002056 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201c:	4b4b      	ldr	r3, [pc, #300]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 800201e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002022:	4a4a      	ldr	r2, [pc, #296]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202c:	f7ff fad0 	bl	80015d0 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002034:	f7ff facc 	bl	80015d0 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e1d4      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002046:	4b41      	ldr	r3, [pc, #260]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8002048:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0ef      	beq.n	8002034 <HAL_RCC_OscConfig+0x3ec>
 8002054:	e01b      	b.n	800208e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002056:	4b3d      	ldr	r3, [pc, #244]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8002058:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800205c:	4a3b      	ldr	r2, [pc, #236]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 800205e:	f023 0301 	bic.w	r3, r3, #1
 8002062:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002066:	f7ff fab3 	bl	80015d0 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206e:	f7ff faaf 	bl	80015d0 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e1b7      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002080:	4b32      	ldr	r3, [pc, #200]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8002082:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1ef      	bne.n	800206e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 80a6 	beq.w	80021e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800209c:	2300      	movs	r3, #0
 800209e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020a0:	4b2a      	ldr	r3, [pc, #168]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 80020a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10d      	bne.n	80020c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ac:	4b27      	ldr	r3, [pc, #156]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b0:	4a26      	ldr	r2, [pc, #152]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 80020b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80020b8:	4b24      	ldr	r3, [pc, #144]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c4:	2301      	movs	r3, #1
 80020c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c8:	4b21      	ldr	r3, [pc, #132]	@ (8002150 <HAL_RCC_OscConfig+0x508>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d118      	bne.n	8002106 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002150 <HAL_RCC_OscConfig+0x508>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002150 <HAL_RCC_OscConfig+0x508>)
 80020da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020e0:	f7ff fa76 	bl	80015d0 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e8:	f7ff fa72 	bl	80015d0 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e17a      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020fa:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <HAL_RCC_OscConfig+0x508>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d108      	bne.n	8002120 <HAL_RCC_OscConfig+0x4d8>
 800210e:	4b0f      	ldr	r3, [pc, #60]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8002110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002114:	4a0d      	ldr	r2, [pc, #52]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800211e:	e029      	b.n	8002174 <HAL_RCC_OscConfig+0x52c>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b05      	cmp	r3, #5
 8002126:	d115      	bne.n	8002154 <HAL_RCC_OscConfig+0x50c>
 8002128:	4b08      	ldr	r3, [pc, #32]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800212e:	4a07      	ldr	r2, [pc, #28]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8002130:	f043 0304 	orr.w	r3, r3, #4
 8002134:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002138:	4b04      	ldr	r3, [pc, #16]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 800213a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800213e:	4a03      	ldr	r2, [pc, #12]	@ (800214c <HAL_RCC_OscConfig+0x504>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002148:	e014      	b.n	8002174 <HAL_RCC_OscConfig+0x52c>
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000
 8002150:	40007000 	.word	0x40007000
 8002154:	4b9c      	ldr	r3, [pc, #624]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 8002156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215a:	4a9b      	ldr	r2, [pc, #620]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 800215c:	f023 0301 	bic.w	r3, r3, #1
 8002160:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002164:	4b98      	ldr	r3, [pc, #608]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 8002166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800216a:	4a97      	ldr	r2, [pc, #604]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 800216c:	f023 0304 	bic.w	r3, r3, #4
 8002170:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d016      	beq.n	80021aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217c:	f7ff fa28 	bl	80015d0 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002182:	e00a      	b.n	800219a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002184:	f7ff fa24 	bl	80015d0 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e12a      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800219a:	4b8b      	ldr	r3, [pc, #556]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 800219c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0ed      	beq.n	8002184 <HAL_RCC_OscConfig+0x53c>
 80021a8:	e015      	b.n	80021d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021aa:	f7ff fa11 	bl	80015d0 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7ff fa0d 	bl	80015d0 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e113      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021c8:	4b7f      	ldr	r3, [pc, #508]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1ed      	bne.n	80021b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d6:	7ffb      	ldrb	r3, [r7, #31]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d105      	bne.n	80021e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021dc:	4b7a      	ldr	r3, [pc, #488]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 80021de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e0:	4a79      	ldr	r2, [pc, #484]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 80021e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021e6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80fe 	beq.w	80023ee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	f040 80d0 	bne.w	800239c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021fc:	4b72      	ldr	r3, [pc, #456]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f003 0203 	and.w	r2, r3, #3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220c:	429a      	cmp	r2, r3
 800220e:	d130      	bne.n	8002272 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	3b01      	subs	r3, #1
 800221c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800221e:	429a      	cmp	r2, r3
 8002220:	d127      	bne.n	8002272 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800222c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800222e:	429a      	cmp	r2, r3
 8002230:	d11f      	bne.n	8002272 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800223c:	2a07      	cmp	r2, #7
 800223e:	bf14      	ite	ne
 8002240:	2201      	movne	r2, #1
 8002242:	2200      	moveq	r2, #0
 8002244:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002246:	4293      	cmp	r3, r2
 8002248:	d113      	bne.n	8002272 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	3b01      	subs	r3, #1
 8002258:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800225a:	429a      	cmp	r2, r3
 800225c:	d109      	bne.n	8002272 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002268:	085b      	lsrs	r3, r3, #1
 800226a:	3b01      	subs	r3, #1
 800226c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800226e:	429a      	cmp	r2, r3
 8002270:	d06e      	beq.n	8002350 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b0c      	cmp	r3, #12
 8002276:	d069      	beq.n	800234c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002278:	4b53      	ldr	r3, [pc, #332]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d105      	bne.n	8002290 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002284:	4b50      	ldr	r3, [pc, #320]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0ad      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002294:	4b4c      	ldr	r3, [pc, #304]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a4b      	ldr	r2, [pc, #300]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 800229a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800229e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022a0:	f7ff f996 	bl	80015d0 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a8:	f7ff f992 	bl	80015d0 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e09a      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ba:	4b43      	ldr	r3, [pc, #268]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022c6:	4b40      	ldr	r3, [pc, #256]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	4b40      	ldr	r3, [pc, #256]	@ (80023cc <HAL_RCC_OscConfig+0x784>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80022d6:	3a01      	subs	r2, #1
 80022d8:	0112      	lsls	r2, r2, #4
 80022da:	4311      	orrs	r1, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80022e0:	0212      	lsls	r2, r2, #8
 80022e2:	4311      	orrs	r1, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80022e8:	0852      	lsrs	r2, r2, #1
 80022ea:	3a01      	subs	r2, #1
 80022ec:	0552      	lsls	r2, r2, #21
 80022ee:	4311      	orrs	r1, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022f4:	0852      	lsrs	r2, r2, #1
 80022f6:	3a01      	subs	r2, #1
 80022f8:	0652      	lsls	r2, r2, #25
 80022fa:	4311      	orrs	r1, r2
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002300:	0912      	lsrs	r2, r2, #4
 8002302:	0452      	lsls	r2, r2, #17
 8002304:	430a      	orrs	r2, r1
 8002306:	4930      	ldr	r1, [pc, #192]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 8002308:	4313      	orrs	r3, r2
 800230a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800230c:	4b2e      	ldr	r3, [pc, #184]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a2d      	ldr	r2, [pc, #180]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 8002312:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002316:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002318:	4b2b      	ldr	r3, [pc, #172]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4a2a      	ldr	r2, [pc, #168]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 800231e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002322:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002324:	f7ff f954 	bl	80015d0 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232c:	f7ff f950 	bl	80015d0 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e058      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233e:	4b22      	ldr	r3, [pc, #136]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800234a:	e050      	b.n	80023ee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e04f      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002350:	4b1d      	ldr	r3, [pc, #116]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d148      	bne.n	80023ee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800235c:	4b1a      	ldr	r3, [pc, #104]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a19      	ldr	r2, [pc, #100]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 8002362:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002366:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002368:	4b17      	ldr	r3, [pc, #92]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4a16      	ldr	r2, [pc, #88]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 800236e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002372:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002374:	f7ff f92c 	bl	80015d0 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237c:	f7ff f928 	bl	80015d0 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e030      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800238e:	4b0e      	ldr	r3, [pc, #56]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x734>
 800239a:	e028      	b.n	80023ee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	2b0c      	cmp	r3, #12
 80023a0:	d023      	beq.n	80023ea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a2:	4b09      	ldr	r3, [pc, #36]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a08      	ldr	r2, [pc, #32]	@ (80023c8 <HAL_RCC_OscConfig+0x780>)
 80023a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ae:	f7ff f90f 	bl	80015d0 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023b4:	e00c      	b.n	80023d0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b6:	f7ff f90b 	bl	80015d0 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d905      	bls.n	80023d0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e013      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
 80023c8:	40021000 	.word	0x40021000
 80023cc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d0:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <HAL_RCC_OscConfig+0x7b0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1ec      	bne.n	80023b6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023dc:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <HAL_RCC_OscConfig+0x7b0>)
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	4905      	ldr	r1, [pc, #20]	@ (80023f8 <HAL_RCC_OscConfig+0x7b0>)
 80023e2:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <HAL_RCC_OscConfig+0x7b4>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	60cb      	str	r3, [r1, #12]
 80023e8:	e001      	b.n	80023ee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3720      	adds	r7, #32
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000
 80023fc:	feeefffc 	.word	0xfeeefffc

08002400 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0e7      	b.n	80025e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002414:	4b75      	ldr	r3, [pc, #468]	@ (80025ec <HAL_RCC_ClockConfig+0x1ec>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d910      	bls.n	8002444 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002422:	4b72      	ldr	r3, [pc, #456]	@ (80025ec <HAL_RCC_ClockConfig+0x1ec>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 0207 	bic.w	r2, r3, #7
 800242a:	4970      	ldr	r1, [pc, #448]	@ (80025ec <HAL_RCC_ClockConfig+0x1ec>)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b6e      	ldr	r3, [pc, #440]	@ (80025ec <HAL_RCC_ClockConfig+0x1ec>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0cf      	b.n	80025e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d010      	beq.n	8002472 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	4b66      	ldr	r3, [pc, #408]	@ (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800245c:	429a      	cmp	r2, r3
 800245e:	d908      	bls.n	8002472 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002460:	4b63      	ldr	r3, [pc, #396]	@ (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4960      	ldr	r1, [pc, #384]	@ (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d04c      	beq.n	8002518 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b03      	cmp	r3, #3
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002486:	4b5a      	ldr	r3, [pc, #360]	@ (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d121      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e0a6      	b.n	80025e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d107      	bne.n	80024ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800249e:	4b54      	ldr	r3, [pc, #336]	@ (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d115      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e09a      	b.n	80025e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024b6:	4b4e      	ldr	r3, [pc, #312]	@ (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e08e      	b.n	80025e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024c6:	4b4a      	ldr	r3, [pc, #296]	@ (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e086      	b.n	80025e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024d6:	4b46      	ldr	r3, [pc, #280]	@ (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f023 0203 	bic.w	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4943      	ldr	r1, [pc, #268]	@ (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e8:	f7ff f872 	bl	80015d0 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f0:	f7ff f86e 	bl	80015d0 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e06e      	b.n	80025e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	4b3a      	ldr	r3, [pc, #232]	@ (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 020c 	and.w	r2, r3, #12
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	429a      	cmp	r2, r3
 8002516:	d1eb      	bne.n	80024f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d010      	beq.n	8002546 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	4b31      	ldr	r3, [pc, #196]	@ (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002530:	429a      	cmp	r2, r3
 8002532:	d208      	bcs.n	8002546 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002534:	4b2e      	ldr	r3, [pc, #184]	@ (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	492b      	ldr	r1, [pc, #172]	@ (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002546:	4b29      	ldr	r3, [pc, #164]	@ (80025ec <HAL_RCC_ClockConfig+0x1ec>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d210      	bcs.n	8002576 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002554:	4b25      	ldr	r3, [pc, #148]	@ (80025ec <HAL_RCC_ClockConfig+0x1ec>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f023 0207 	bic.w	r2, r3, #7
 800255c:	4923      	ldr	r1, [pc, #140]	@ (80025ec <HAL_RCC_ClockConfig+0x1ec>)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	4313      	orrs	r3, r2
 8002562:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002564:	4b21      	ldr	r3, [pc, #132]	@ (80025ec <HAL_RCC_ClockConfig+0x1ec>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d001      	beq.n	8002576 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e036      	b.n	80025e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002582:	4b1b      	ldr	r3, [pc, #108]	@ (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	4918      	ldr	r1, [pc, #96]	@ (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002590:	4313      	orrs	r3, r2
 8002592:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025a0:	4b13      	ldr	r3, [pc, #76]	@ (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4910      	ldr	r1, [pc, #64]	@ (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025b4:	f000 f824 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b0d      	ldr	r3, [pc, #52]	@ (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	091b      	lsrs	r3, r3, #4
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	490b      	ldr	r1, [pc, #44]	@ (80025f4 <HAL_RCC_ClockConfig+0x1f4>)
 80025c6:	5ccb      	ldrb	r3, [r1, r3]
 80025c8:	f003 031f 	and.w	r3, r3, #31
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
 80025d0:	4a09      	ldr	r2, [pc, #36]	@ (80025f8 <HAL_RCC_ClockConfig+0x1f8>)
 80025d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025d4:	4b09      	ldr	r3, [pc, #36]	@ (80025fc <HAL_RCC_ClockConfig+0x1fc>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe ffa9 	bl	8001530 <HAL_InitTick>
 80025de:	4603      	mov	r3, r0
 80025e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80025e2:	7afb      	ldrb	r3, [r7, #11]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40022000 	.word	0x40022000
 80025f0:	40021000 	.word	0x40021000
 80025f4:	0800f688 	.word	0x0800f688
 80025f8:	20000018 	.word	0x20000018
 80025fc:	2000001c 	.word	0x2000001c

08002600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	@ 0x24
 8002604:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
 800260a:	2300      	movs	r3, #0
 800260c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260e:	4b3e      	ldr	r3, [pc, #248]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002618:	4b3b      	ldr	r3, [pc, #236]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0x34>
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	2b0c      	cmp	r3, #12
 800262c:	d121      	bne.n	8002672 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d11e      	bne.n	8002672 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002634:	4b34      	ldr	r3, [pc, #208]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d107      	bne.n	8002650 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002640:	4b31      	ldr	r3, [pc, #196]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 8002642:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002646:	0a1b      	lsrs	r3, r3, #8
 8002648:	f003 030f 	and.w	r3, r3, #15
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	e005      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002650:	4b2d      	ldr	r3, [pc, #180]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800265c:	4a2b      	ldr	r2, [pc, #172]	@ (800270c <HAL_RCC_GetSysClockFreq+0x10c>)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002664:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10d      	bne.n	8002688 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b04      	cmp	r3, #4
 8002676:	d102      	bne.n	800267e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002678:	4b25      	ldr	r3, [pc, #148]	@ (8002710 <HAL_RCC_GetSysClockFreq+0x110>)
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	e004      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	2b08      	cmp	r3, #8
 8002682:	d101      	bne.n	8002688 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002684:	4b23      	ldr	r3, [pc, #140]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x114>)
 8002686:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	2b0c      	cmp	r3, #12
 800268c:	d134      	bne.n	80026f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800268e:	4b1e      	ldr	r3, [pc, #120]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d003      	beq.n	80026a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d003      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0xac>
 80026a4:	e005      	b.n	80026b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002710 <HAL_RCC_GetSysClockFreq+0x110>)
 80026a8:	617b      	str	r3, [r7, #20]
      break;
 80026aa:	e005      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026ac:	4b19      	ldr	r3, [pc, #100]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x114>)
 80026ae:	617b      	str	r3, [r7, #20]
      break;
 80026b0:	e002      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	617b      	str	r3, [r7, #20]
      break;
 80026b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026b8:	4b13      	ldr	r3, [pc, #76]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	3301      	adds	r3, #1
 80026c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026c6:	4b10      	ldr	r3, [pc, #64]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	fb03 f202 	mul.w	r2, r3, r2
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026de:	4b0a      	ldr	r3, [pc, #40]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	0e5b      	lsrs	r3, r3, #25
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	3301      	adds	r3, #1
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026f8:	69bb      	ldr	r3, [r7, #24]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3724      	adds	r7, #36	@ 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	0800f6a0 	.word	0x0800f6a0
 8002710:	00f42400 	.word	0x00f42400
 8002714:	007a1200 	.word	0x007a1200

08002718 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800271c:	4b03      	ldr	r3, [pc, #12]	@ (800272c <HAL_RCC_GetHCLKFreq+0x14>)
 800271e:	681b      	ldr	r3, [r3, #0]
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000018 	.word	0x20000018

08002730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002734:	f7ff fff0 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	4b06      	ldr	r3, [pc, #24]	@ (8002754 <HAL_RCC_GetPCLK1Freq+0x24>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4904      	ldr	r1, [pc, #16]	@ (8002758 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002746:	5ccb      	ldrb	r3, [r1, r3]
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002750:	4618      	mov	r0, r3
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40021000 	.word	0x40021000
 8002758:	0800f698 	.word	0x0800f698

0800275c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002760:	f7ff ffda 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002764:	4602      	mov	r2, r0
 8002766:	4b06      	ldr	r3, [pc, #24]	@ (8002780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	0adb      	lsrs	r3, r3, #11
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	4904      	ldr	r1, [pc, #16]	@ (8002784 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002772:	5ccb      	ldrb	r3, [r1, r3]
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000
 8002784:	0800f698 	.word	0x0800f698

08002788 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002790:	2300      	movs	r3, #0
 8002792:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002794:	4b2a      	ldr	r3, [pc, #168]	@ (8002840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027a0:	f7ff f9ee 	bl	8001b80 <HAL_PWREx_GetVoltageRange>
 80027a4:	6178      	str	r0, [r7, #20]
 80027a6:	e014      	b.n	80027d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027a8:	4b25      	ldr	r3, [pc, #148]	@ (8002840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ac:	4a24      	ldr	r2, [pc, #144]	@ (8002840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80027b4:	4b22      	ldr	r3, [pc, #136]	@ (8002840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027c0:	f7ff f9de 	bl	8001b80 <HAL_PWREx_GetVoltageRange>
 80027c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027d8:	d10b      	bne.n	80027f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b80      	cmp	r3, #128	@ 0x80
 80027de:	d919      	bls.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80027e4:	d902      	bls.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027e6:	2302      	movs	r3, #2
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	e013      	b.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027ec:	2301      	movs	r3, #1
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	e010      	b.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b80      	cmp	r3, #128	@ 0x80
 80027f6:	d902      	bls.n	80027fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027f8:	2303      	movs	r3, #3
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	e00a      	b.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b80      	cmp	r3, #128	@ 0x80
 8002802:	d102      	bne.n	800280a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002804:	2302      	movs	r3, #2
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	e004      	b.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b70      	cmp	r3, #112	@ 0x70
 800280e:	d101      	bne.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002810:	2301      	movs	r3, #1
 8002812:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002814:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f023 0207 	bic.w	r2, r3, #7
 800281c:	4909      	ldr	r1, [pc, #36]	@ (8002844 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002824:	4b07      	ldr	r3, [pc, #28]	@ (8002844 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	429a      	cmp	r2, r3
 8002830:	d001      	beq.n	8002836 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000
 8002844:	40022000 	.word	0x40022000

08002848 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002850:	2300      	movs	r3, #0
 8002852:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002854:	2300      	movs	r3, #0
 8002856:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002860:	2b00      	cmp	r3, #0
 8002862:	d041      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002868:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800286c:	d02a      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800286e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002872:	d824      	bhi.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002874:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002878:	d008      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800287a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800287e:	d81e      	bhi.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002884:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002888:	d010      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800288a:	e018      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800288c:	4b86      	ldr	r3, [pc, #536]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a85      	ldr	r2, [pc, #532]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002892:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002896:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002898:	e015      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3304      	adds	r3, #4
 800289e:	2100      	movs	r1, #0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 fabb 	bl	8002e1c <RCCEx_PLLSAI1_Config>
 80028a6:	4603      	mov	r3, r0
 80028a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028aa:	e00c      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3320      	adds	r3, #32
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fba6 	bl	8003004 <RCCEx_PLLSAI2_Config>
 80028b8:	4603      	mov	r3, r0
 80028ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028bc:	e003      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	74fb      	strb	r3, [r7, #19]
      break;
 80028c2:	e000      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80028c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028c6:	7cfb      	ldrb	r3, [r7, #19]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10b      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028cc:	4b76      	ldr	r3, [pc, #472]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028da:	4973      	ldr	r1, [pc, #460]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80028e2:	e001      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d041      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80028fc:	d02a      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80028fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002902:	d824      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002904:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002908:	d008      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800290a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800290e:	d81e      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002914:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002918:	d010      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800291a:	e018      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800291c:	4b62      	ldr	r3, [pc, #392]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	4a61      	ldr	r2, [pc, #388]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002922:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002926:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002928:	e015      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3304      	adds	r3, #4
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f000 fa73 	bl	8002e1c <RCCEx_PLLSAI1_Config>
 8002936:	4603      	mov	r3, r0
 8002938:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800293a:	e00c      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3320      	adds	r3, #32
 8002940:	2100      	movs	r1, #0
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fb5e 	bl	8003004 <RCCEx_PLLSAI2_Config>
 8002948:	4603      	mov	r3, r0
 800294a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800294c:	e003      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	74fb      	strb	r3, [r7, #19]
      break;
 8002952:	e000      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002954:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002956:	7cfb      	ldrb	r3, [r7, #19]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10b      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800295c:	4b52      	ldr	r3, [pc, #328]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002962:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800296a:	494f      	ldr	r1, [pc, #316]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002972:	e001      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002974:	7cfb      	ldrb	r3, [r7, #19]
 8002976:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80a0 	beq.w	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002986:	2300      	movs	r3, #0
 8002988:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800298a:	4b47      	ldr	r3, [pc, #284]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800298c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800299a:	2300      	movs	r3, #0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00d      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a0:	4b41      	ldr	r3, [pc, #260]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a4:	4a40      	ldr	r2, [pc, #256]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80029ac:	4b3e      	ldr	r3, [pc, #248]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b8:	2301      	movs	r3, #1
 80029ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029bc:	4b3b      	ldr	r3, [pc, #236]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a3a      	ldr	r2, [pc, #232]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029c8:	f7fe fe02 	bl	80015d0 <HAL_GetTick>
 80029cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029ce:	e009      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d0:	f7fe fdfe 	bl	80015d0 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d902      	bls.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	74fb      	strb	r3, [r7, #19]
        break;
 80029e2:	e005      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029e4:	4b31      	ldr	r3, [pc, #196]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0ef      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80029f0:	7cfb      	ldrb	r3, [r7, #19]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d15c      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029f6:	4b2c      	ldr	r3, [pc, #176]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01f      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d019      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a14:	4b24      	ldr	r3, [pc, #144]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a20:	4b21      	ldr	r3, [pc, #132]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a26:	4a20      	ldr	r2, [pc, #128]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a30:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a36:	4a1c      	ldr	r2, [pc, #112]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a40:	4a19      	ldr	r2, [pc, #100]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d016      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a52:	f7fe fdbd 	bl	80015d0 <HAL_GetTick>
 8002a56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a58:	e00b      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5a:	f7fe fdb9 	bl	80015d0 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d902      	bls.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	74fb      	strb	r3, [r7, #19]
            break;
 8002a70:	e006      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a72:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0ec      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a80:	7cfb      	ldrb	r3, [r7, #19]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a86:	4b08      	ldr	r3, [pc, #32]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a96:	4904      	ldr	r1, [pc, #16]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002a9e:	e009      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002aa0:	7cfb      	ldrb	r3, [r7, #19]
 8002aa2:	74bb      	strb	r3, [r7, #18]
 8002aa4:	e006      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab0:	7cfb      	ldrb	r3, [r7, #19]
 8002ab2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ab4:	7c7b      	ldrb	r3, [r7, #17]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d105      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aba:	4b9e      	ldr	r3, [pc, #632]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002abe:	4a9d      	ldr	r2, [pc, #628]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ad2:	4b98      	ldr	r3, [pc, #608]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad8:	f023 0203 	bic.w	r2, r3, #3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae0:	4994      	ldr	r1, [pc, #592]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002af4:	4b8f      	ldr	r3, [pc, #572]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afa:	f023 020c 	bic.w	r2, r3, #12
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b02:	498c      	ldr	r1, [pc, #560]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b16:	4b87      	ldr	r3, [pc, #540]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b24:	4983      	ldr	r1, [pc, #524]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b38:	4b7e      	ldr	r3, [pc, #504]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b46:	497b      	ldr	r1, [pc, #492]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0310 	and.w	r3, r3, #16
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b5a:	4b76      	ldr	r3, [pc, #472]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b68:	4972      	ldr	r1, [pc, #456]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b7c:	4b6d      	ldr	r3, [pc, #436]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b8a:	496a      	ldr	r1, [pc, #424]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b9e:	4b65      	ldr	r3, [pc, #404]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bac:	4961      	ldr	r1, [pc, #388]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bc0:	4b5c      	ldr	r3, [pc, #368]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bce:	4959      	ldr	r1, [pc, #356]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002be2:	4b54      	ldr	r3, [pc, #336]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bf0:	4950      	ldr	r1, [pc, #320]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c04:	4b4b      	ldr	r3, [pc, #300]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c12:	4948      	ldr	r1, [pc, #288]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c26:	4b43      	ldr	r3, [pc, #268]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c34:	493f      	ldr	r1, [pc, #252]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d028      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c48:	4b3a      	ldr	r3, [pc, #232]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c56:	4937      	ldr	r1, [pc, #220]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c66:	d106      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c68:	4b32      	ldr	r3, [pc, #200]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4a31      	ldr	r2, [pc, #196]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c72:	60d3      	str	r3, [r2, #12]
 8002c74:	e011      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c7e:	d10c      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3304      	adds	r3, #4
 8002c84:	2101      	movs	r1, #1
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f8c8 	bl	8002e1c <RCCEx_PLLSAI1_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c90:	7cfb      	ldrb	r3, [r7, #19]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c96:	7cfb      	ldrb	r3, [r7, #19]
 8002c98:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d028      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ca6:	4b23      	ldr	r3, [pc, #140]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb4:	491f      	ldr	r1, [pc, #124]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cc4:	d106      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	4a1a      	ldr	r2, [pc, #104]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ccc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cd0:	60d3      	str	r3, [r2, #12]
 8002cd2:	e011      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 f899 	bl	8002e1c <RCCEx_PLLSAI1_Config>
 8002cea:	4603      	mov	r3, r0
 8002cec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cee:	7cfb      	ldrb	r3, [r7, #19]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002cf4:	7cfb      	ldrb	r3, [r7, #19]
 8002cf6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d02b      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d04:	4b0b      	ldr	r3, [pc, #44]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d12:	4908      	ldr	r1, [pc, #32]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d22:	d109      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d24:	4b03      	ldr	r3, [pc, #12]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4a02      	ldr	r2, [pc, #8]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d2e:	60d3      	str	r3, [r2, #12]
 8002d30:	e014      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d32:	bf00      	nop
 8002d34:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3304      	adds	r3, #4
 8002d46:	2101      	movs	r1, #1
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 f867 	bl	8002e1c <RCCEx_PLLSAI1_Config>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d52:	7cfb      	ldrb	r3, [r7, #19]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d02f      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d68:	4b2b      	ldr	r3, [pc, #172]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d76:	4928      	ldr	r1, [pc, #160]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d86:	d10d      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	2102      	movs	r1, #2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 f844 	bl	8002e1c <RCCEx_PLLSAI1_Config>
 8002d94:	4603      	mov	r3, r0
 8002d96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d98:	7cfb      	ldrb	r3, [r7, #19]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d014      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d9e:	7cfb      	ldrb	r3, [r7, #19]
 8002da0:	74bb      	strb	r3, [r7, #18]
 8002da2:	e011      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002da8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dac:	d10c      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3320      	adds	r3, #32
 8002db2:	2102      	movs	r1, #2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 f925 	bl	8003004 <RCCEx_PLLSAI2_Config>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dbe:	7cfb      	ldrb	r3, [r7, #19]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002dc4:	7cfb      	ldrb	r3, [r7, #19]
 8002dc6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002dd4:	4b10      	ldr	r3, [pc, #64]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dda:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002de2:	490d      	ldr	r1, [pc, #52]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00b      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002df6:	4b08      	ldr	r3, [pc, #32]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e06:	4904      	ldr	r1, [pc, #16]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e0e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000

08002e1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e2a:	4b75      	ldr	r3, [pc, #468]	@ (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d018      	beq.n	8002e68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e36:	4b72      	ldr	r3, [pc, #456]	@ (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f003 0203 	and.w	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d10d      	bne.n	8002e62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
       ||
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e4e:	4b6c      	ldr	r3, [pc, #432]	@ (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	091b      	lsrs	r3, r3, #4
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
       ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d047      	beq.n	8002ef2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
 8002e66:	e044      	b.n	8002ef2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d018      	beq.n	8002ea2 <RCCEx_PLLSAI1_Config+0x86>
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d825      	bhi.n	8002ec0 <RCCEx_PLLSAI1_Config+0xa4>
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d002      	beq.n	8002e7e <RCCEx_PLLSAI1_Config+0x62>
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d009      	beq.n	8002e90 <RCCEx_PLLSAI1_Config+0x74>
 8002e7c:	e020      	b.n	8002ec0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e7e:	4b60      	ldr	r3, [pc, #384]	@ (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d11d      	bne.n	8002ec6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8e:	e01a      	b.n	8002ec6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e90:	4b5b      	ldr	r3, [pc, #364]	@ (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d116      	bne.n	8002eca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea0:	e013      	b.n	8002eca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ea2:	4b57      	ldr	r3, [pc, #348]	@ (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10f      	bne.n	8002ece <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002eae:	4b54      	ldr	r3, [pc, #336]	@ (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ebe:	e006      	b.n	8002ece <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec4:	e004      	b.n	8002ed0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e002      	b.n	8002ed0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e000      	b.n	8002ed0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ece:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10d      	bne.n	8002ef2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ed6:	4b4a      	ldr	r3, [pc, #296]	@ (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6819      	ldr	r1, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	430b      	orrs	r3, r1
 8002eec:	4944      	ldr	r1, [pc, #272]	@ (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d17d      	bne.n	8002ff4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ef8:	4b41      	ldr	r3, [pc, #260]	@ (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a40      	ldr	r2, [pc, #256]	@ (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f04:	f7fe fb64 	bl	80015d0 <HAL_GetTick>
 8002f08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f0a:	e009      	b.n	8002f20 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f0c:	f7fe fb60 	bl	80015d0 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d902      	bls.n	8002f20 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f1e:	e005      	b.n	8002f2c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f20:	4b37      	ldr	r3, [pc, #220]	@ (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1ef      	bne.n	8002f0c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d160      	bne.n	8002ff4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d111      	bne.n	8002f5c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f38:	4b31      	ldr	r3, [pc, #196]	@ (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002f40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6892      	ldr	r2, [r2, #8]
 8002f48:	0211      	lsls	r1, r2, #8
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68d2      	ldr	r2, [r2, #12]
 8002f4e:	0912      	lsrs	r2, r2, #4
 8002f50:	0452      	lsls	r2, r2, #17
 8002f52:	430a      	orrs	r2, r1
 8002f54:	492a      	ldr	r1, [pc, #168]	@ (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	610b      	str	r3, [r1, #16]
 8002f5a:	e027      	b.n	8002fac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d112      	bne.n	8002f88 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f62:	4b27      	ldr	r3, [pc, #156]	@ (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002f6a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6892      	ldr	r2, [r2, #8]
 8002f72:	0211      	lsls	r1, r2, #8
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6912      	ldr	r2, [r2, #16]
 8002f78:	0852      	lsrs	r2, r2, #1
 8002f7a:	3a01      	subs	r2, #1
 8002f7c:	0552      	lsls	r2, r2, #21
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	491f      	ldr	r1, [pc, #124]	@ (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	610b      	str	r3, [r1, #16]
 8002f86:	e011      	b.n	8002fac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f88:	4b1d      	ldr	r3, [pc, #116]	@ (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f90:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6892      	ldr	r2, [r2, #8]
 8002f98:	0211      	lsls	r1, r2, #8
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6952      	ldr	r2, [r2, #20]
 8002f9e:	0852      	lsrs	r2, r2, #1
 8002fa0:	3a01      	subs	r2, #1
 8002fa2:	0652      	lsls	r2, r2, #25
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	4916      	ldr	r1, [pc, #88]	@ (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002fac:	4b14      	ldr	r3, [pc, #80]	@ (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a13      	ldr	r2, [pc, #76]	@ (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002fb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb8:	f7fe fb0a 	bl	80015d0 <HAL_GetTick>
 8002fbc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fbe:	e009      	b.n	8002fd4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fc0:	f7fe fb06 	bl	80015d0 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d902      	bls.n	8002fd4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	73fb      	strb	r3, [r7, #15]
          break;
 8002fd2:	e005      	b.n	8002fe0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0ef      	beq.n	8002fc0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002fe6:	4b06      	ldr	r3, [pc, #24]	@ (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	4904      	ldr	r1, [pc, #16]	@ (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000

08003004 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003012:	4b6a      	ldr	r3, [pc, #424]	@ (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d018      	beq.n	8003050 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800301e:	4b67      	ldr	r3, [pc, #412]	@ (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f003 0203 	and.w	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d10d      	bne.n	800304a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
       ||
 8003032:	2b00      	cmp	r3, #0
 8003034:	d009      	beq.n	800304a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003036:	4b61      	ldr	r3, [pc, #388]	@ (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	091b      	lsrs	r3, r3, #4
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
       ||
 8003046:	429a      	cmp	r2, r3
 8003048:	d047      	beq.n	80030da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	73fb      	strb	r3, [r7, #15]
 800304e:	e044      	b.n	80030da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d018      	beq.n	800308a <RCCEx_PLLSAI2_Config+0x86>
 8003058:	2b03      	cmp	r3, #3
 800305a:	d825      	bhi.n	80030a8 <RCCEx_PLLSAI2_Config+0xa4>
 800305c:	2b01      	cmp	r3, #1
 800305e:	d002      	beq.n	8003066 <RCCEx_PLLSAI2_Config+0x62>
 8003060:	2b02      	cmp	r3, #2
 8003062:	d009      	beq.n	8003078 <RCCEx_PLLSAI2_Config+0x74>
 8003064:	e020      	b.n	80030a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003066:	4b55      	ldr	r3, [pc, #340]	@ (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d11d      	bne.n	80030ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003076:	e01a      	b.n	80030ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003078:	4b50      	ldr	r3, [pc, #320]	@ (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003080:	2b00      	cmp	r3, #0
 8003082:	d116      	bne.n	80030b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003088:	e013      	b.n	80030b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800308a:	4b4c      	ldr	r3, [pc, #304]	@ (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10f      	bne.n	80030b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003096:	4b49      	ldr	r3, [pc, #292]	@ (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030a6:	e006      	b.n	80030b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	73fb      	strb	r3, [r7, #15]
      break;
 80030ac:	e004      	b.n	80030b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030ae:	bf00      	nop
 80030b0:	e002      	b.n	80030b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030b2:	bf00      	nop
 80030b4:	e000      	b.n	80030b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10d      	bne.n	80030da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030be:	4b3f      	ldr	r3, [pc, #252]	@ (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6819      	ldr	r1, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	430b      	orrs	r3, r1
 80030d4:	4939      	ldr	r1, [pc, #228]	@ (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d167      	bne.n	80031b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80030e0:	4b36      	ldr	r3, [pc, #216]	@ (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a35      	ldr	r2, [pc, #212]	@ (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ec:	f7fe fa70 	bl	80015d0 <HAL_GetTick>
 80030f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030f2:	e009      	b.n	8003108 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030f4:	f7fe fa6c 	bl	80015d0 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d902      	bls.n	8003108 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	73fb      	strb	r3, [r7, #15]
        break;
 8003106:	e005      	b.n	8003114 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003108:	4b2c      	ldr	r3, [pc, #176]	@ (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1ef      	bne.n	80030f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d14a      	bne.n	80031b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d111      	bne.n	8003144 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003120:	4b26      	ldr	r3, [pc, #152]	@ (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003128:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6892      	ldr	r2, [r2, #8]
 8003130:	0211      	lsls	r1, r2, #8
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68d2      	ldr	r2, [r2, #12]
 8003136:	0912      	lsrs	r2, r2, #4
 8003138:	0452      	lsls	r2, r2, #17
 800313a:	430a      	orrs	r2, r1
 800313c:	491f      	ldr	r1, [pc, #124]	@ (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800313e:	4313      	orrs	r3, r2
 8003140:	614b      	str	r3, [r1, #20]
 8003142:	e011      	b.n	8003168 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003144:	4b1d      	ldr	r3, [pc, #116]	@ (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800314c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6892      	ldr	r2, [r2, #8]
 8003154:	0211      	lsls	r1, r2, #8
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6912      	ldr	r2, [r2, #16]
 800315a:	0852      	lsrs	r2, r2, #1
 800315c:	3a01      	subs	r2, #1
 800315e:	0652      	lsls	r2, r2, #25
 8003160:	430a      	orrs	r2, r1
 8003162:	4916      	ldr	r1, [pc, #88]	@ (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003164:	4313      	orrs	r3, r2
 8003166:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003168:	4b14      	ldr	r3, [pc, #80]	@ (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a13      	ldr	r2, [pc, #76]	@ (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800316e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003172:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003174:	f7fe fa2c 	bl	80015d0 <HAL_GetTick>
 8003178:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800317a:	e009      	b.n	8003190 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800317c:	f7fe fa28 	bl	80015d0 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d902      	bls.n	8003190 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	73fb      	strb	r3, [r7, #15]
          break;
 800318e:	e005      	b.n	800319c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003190:	4b0a      	ldr	r3, [pc, #40]	@ (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0ef      	beq.n	800317c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031a2:	4b06      	ldr	r3, [pc, #24]	@ (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a4:	695a      	ldr	r2, [r3, #20]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	4904      	ldr	r1, [pc, #16]	@ (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000

080031c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e095      	b.n	80032fe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d108      	bne.n	80031ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031e2:	d009      	beq.n	80031f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	61da      	str	r2, [r3, #28]
 80031ea:	e005      	b.n	80031f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7fe f82a 	bl	800126c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800322e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003238:	d902      	bls.n	8003240 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	e002      	b.n	8003246 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003240:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003244:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800324e:	d007      	beq.n	8003260 <HAL_SPI_Init+0xa0>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003258:	d002      	beq.n	8003260 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003298:	431a      	orrs	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a2:	ea42 0103 	orr.w	r1, r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032aa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	0c1b      	lsrs	r3, r3, #16
 80032bc:	f003 0204 	and.w	r2, r3, #4
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80032dc:	ea42 0103 	orr.w	r1, r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b088      	sub	sp, #32
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	603b      	str	r3, [r7, #0]
 8003312:	4613      	mov	r3, r2
 8003314:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003316:	f7fe f95b 	bl	80015d0 <HAL_GetTick>
 800331a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800331c:	88fb      	ldrh	r3, [r7, #6]
 800331e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b01      	cmp	r3, #1
 800332a:	d001      	beq.n	8003330 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800332c:	2302      	movs	r3, #2
 800332e:	e15c      	b.n	80035ea <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <HAL_SPI_Transmit+0x36>
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e154      	b.n	80035ea <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_SPI_Transmit+0x48>
 800334a:	2302      	movs	r3, #2
 800334c:	e14d      	b.n	80035ea <HAL_SPI_Transmit+0x2e4>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2203      	movs	r2, #3
 800335a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	88fa      	ldrh	r2, [r7, #6]
 800336e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	88fa      	ldrh	r2, [r7, #6]
 8003374:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033a0:	d10f      	bne.n	80033c2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033cc:	2b40      	cmp	r3, #64	@ 0x40
 80033ce:	d007      	beq.n	80033e0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033e8:	d952      	bls.n	8003490 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_SPI_Transmit+0xf2>
 80033f2:	8b7b      	ldrh	r3, [r7, #26]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d145      	bne.n	8003484 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fc:	881a      	ldrh	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003408:	1c9a      	adds	r2, r3, #2
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800341c:	e032      	b.n	8003484 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b02      	cmp	r3, #2
 800342a:	d112      	bne.n	8003452 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003430:	881a      	ldrh	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343c:	1c9a      	adds	r2, r3, #2
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003446:	b29b      	uxth	r3, r3
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003450:	e018      	b.n	8003484 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003452:	f7fe f8bd 	bl	80015d0 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d803      	bhi.n	800346a <HAL_SPI_Transmit+0x164>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003468:	d102      	bne.n	8003470 <HAL_SPI_Transmit+0x16a>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d109      	bne.n	8003484 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e0b2      	b.n	80035ea <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1c7      	bne.n	800341e <HAL_SPI_Transmit+0x118>
 800348e:	e083      	b.n	8003598 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <HAL_SPI_Transmit+0x198>
 8003498:	8b7b      	ldrh	r3, [r7, #26]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d177      	bne.n	800358e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d912      	bls.n	80034ce <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ac:	881a      	ldrh	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b8:	1c9a      	adds	r2, r3, #2
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b02      	subs	r3, #2
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034cc:	e05f      	b.n	800358e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	330c      	adds	r3, #12
 80034d8:	7812      	ldrb	r2, [r2, #0]
 80034da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80034f4:	e04b      	b.n	800358e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b02      	cmp	r3, #2
 8003502:	d12b      	bne.n	800355c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b01      	cmp	r3, #1
 800350c:	d912      	bls.n	8003534 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003512:	881a      	ldrh	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351e:	1c9a      	adds	r2, r3, #2
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b02      	subs	r3, #2
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003532:	e02c      	b.n	800358e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	330c      	adds	r3, #12
 800353e:	7812      	ldrb	r2, [r2, #0]
 8003540:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003550:	b29b      	uxth	r3, r3
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800355a:	e018      	b.n	800358e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800355c:	f7fe f838 	bl	80015d0 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d803      	bhi.n	8003574 <HAL_SPI_Transmit+0x26e>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003572:	d102      	bne.n	800357a <HAL_SPI_Transmit+0x274>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e02d      	b.n	80035ea <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003592:	b29b      	uxth	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1ae      	bne.n	80034f6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	6839      	ldr	r1, [r7, #0]
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f947 	bl	8003830 <SPI_EndRxTxTransaction>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10a      	bne.n	80035cc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80035e8:	2300      	movs	r3, #0
  }
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3720      	adds	r7, #32
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003604:	f7fd ffe4 	bl	80015d0 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	4413      	add	r3, r2
 8003612:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003614:	f7fd ffdc 	bl	80015d0 <HAL_GetTick>
 8003618:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800361a:	4b39      	ldr	r3, [pc, #228]	@ (8003700 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	015b      	lsls	r3, r3, #5
 8003620:	0d1b      	lsrs	r3, r3, #20
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	fb02 f303 	mul.w	r3, r2, r3
 8003628:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800362a:	e054      	b.n	80036d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003632:	d050      	beq.n	80036d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003634:	f7fd ffcc 	bl	80015d0 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	429a      	cmp	r2, r3
 8003642:	d902      	bls.n	800364a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d13d      	bne.n	80036c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003658:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003662:	d111      	bne.n	8003688 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800366c:	d004      	beq.n	8003678 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003676:	d107      	bne.n	8003688 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003686:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003690:	d10f      	bne.n	80036b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e017      	b.n	80036f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4013      	ands	r3, r2
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	bf0c      	ite	eq
 80036e6:	2301      	moveq	r3, #1
 80036e8:	2300      	movne	r3, #0
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	461a      	mov	r2, r3
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d19b      	bne.n	800362c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3720      	adds	r7, #32
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	20000018 	.word	0x20000018

08003704 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08a      	sub	sp, #40	@ 0x28
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003712:	2300      	movs	r3, #0
 8003714:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003716:	f7fd ff5b 	bl	80015d0 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371e:	1a9b      	subs	r3, r3, r2
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	4413      	add	r3, r2
 8003724:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003726:	f7fd ff53 	bl	80015d0 <HAL_GetTick>
 800372a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	330c      	adds	r3, #12
 8003732:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003734:	4b3d      	ldr	r3, [pc, #244]	@ (800382c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	00da      	lsls	r2, r3, #3
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	0d1b      	lsrs	r3, r3, #20
 8003744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003746:	fb02 f303 	mul.w	r3, r2, r3
 800374a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800374c:	e060      	b.n	8003810 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003754:	d107      	bne.n	8003766 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d104      	bne.n	8003766 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003764:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d050      	beq.n	8003810 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800376e:	f7fd ff2f 	bl	80015d0 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800377a:	429a      	cmp	r2, r3
 800377c:	d902      	bls.n	8003784 <SPI_WaitFifoStateUntilTimeout+0x80>
 800377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003780:	2b00      	cmp	r3, #0
 8003782:	d13d      	bne.n	8003800 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003792:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800379c:	d111      	bne.n	80037c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037a6:	d004      	beq.n	80037b2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037b0:	d107      	bne.n	80037c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037ca:	d10f      	bne.n	80037ec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e010      	b.n	8003822 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	3b01      	subs	r3, #1
 800380e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	4013      	ands	r3, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	429a      	cmp	r2, r3
 800381e:	d196      	bne.n	800374e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3728      	adds	r7, #40	@ 0x28
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20000018 	.word	0x20000018

08003830 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af02      	add	r7, sp, #8
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2200      	movs	r2, #0
 8003844:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f7ff ff5b 	bl	8003704 <SPI_WaitFifoStateUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d007      	beq.n	8003864 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003858:	f043 0220 	orr.w	r2, r3, #32
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e027      	b.n	80038b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2200      	movs	r2, #0
 800386c:	2180      	movs	r1, #128	@ 0x80
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f7ff fec0 	bl	80035f4 <SPI_WaitFlagStateUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d007      	beq.n	800388a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800387e:	f043 0220 	orr.w	r2, r3, #32
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e014      	b.n	80038b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2200      	movs	r2, #0
 8003892:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f7ff ff34 	bl	8003704 <SPI_WaitFifoStateUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d007      	beq.n	80038b2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a6:	f043 0220 	orr.w	r2, r3, #32
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e000      	b.n	80038b4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e040      	b.n	8003950 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fd fd08 	bl	80012f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2224      	movs	r2, #36	@ 0x24
 80038e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0201 	bic.w	r2, r2, #1
 80038f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fb6a 	bl	8003fdc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f8af 	bl	8003a6c <UART_SetConfig>
 800390e:	4603      	mov	r3, r0
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e01b      	b.n	8003950 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003926:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003936:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 fbe9 	bl	8004120 <UART_CheckIdleState>
 800394e:	4603      	mov	r3, r0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08a      	sub	sp, #40	@ 0x28
 800395c:	af02      	add	r7, sp, #8
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	4613      	mov	r3, r2
 8003966:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800396c:	2b20      	cmp	r3, #32
 800396e:	d177      	bne.n	8003a60 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <HAL_UART_Transmit+0x24>
 8003976:	88fb      	ldrh	r3, [r7, #6]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e070      	b.n	8003a62 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2221      	movs	r2, #33	@ 0x21
 800398c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800398e:	f7fd fe1f 	bl	80015d0 <HAL_GetTick>
 8003992:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	88fa      	ldrh	r2, [r7, #6]
 8003998:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	88fa      	ldrh	r2, [r7, #6]
 80039a0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ac:	d108      	bne.n	80039c0 <HAL_UART_Transmit+0x68>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d104      	bne.n	80039c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	e003      	b.n	80039c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039c8:	e02f      	b.n	8003a2a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2200      	movs	r2, #0
 80039d2:	2180      	movs	r1, #128	@ 0x80
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 fc4b 	bl	8004270 <UART_WaitOnFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d004      	beq.n	80039ea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e03b      	b.n	8003a62 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10b      	bne.n	8003a08 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	881a      	ldrh	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039fc:	b292      	uxth	r2, r2
 80039fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	3302      	adds	r3, #2
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	e007      	b.n	8003a18 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	781a      	ldrb	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3301      	adds	r3, #1
 8003a16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1c9      	bne.n	80039ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	2140      	movs	r1, #64	@ 0x40
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 fc15 	bl	8004270 <UART_WaitOnFlagUntilTimeout>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d004      	beq.n	8003a56 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e005      	b.n	8003a62 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e000      	b.n	8003a62 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003a60:	2302      	movs	r3, #2
  }
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a70:	b08a      	sub	sp, #40	@ 0x28
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	431a      	orrs	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	4ba4      	ldr	r3, [pc, #656]	@ (8003d2c <UART_SetConfig+0x2c0>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a99      	ldr	r2, [pc, #612]	@ (8003d30 <UART_SetConfig+0x2c4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d004      	beq.n	8003ad8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a90      	ldr	r2, [pc, #576]	@ (8003d34 <UART_SetConfig+0x2c8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d126      	bne.n	8003b44 <UART_SetConfig+0xd8>
 8003af6:	4b90      	ldr	r3, [pc, #576]	@ (8003d38 <UART_SetConfig+0x2cc>)
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d81b      	bhi.n	8003b3c <UART_SetConfig+0xd0>
 8003b04:	a201      	add	r2, pc, #4	@ (adr r2, 8003b0c <UART_SetConfig+0xa0>)
 8003b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0a:	bf00      	nop
 8003b0c:	08003b1d 	.word	0x08003b1d
 8003b10:	08003b2d 	.word	0x08003b2d
 8003b14:	08003b25 	.word	0x08003b25
 8003b18:	08003b35 	.word	0x08003b35
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b22:	e116      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003b24:	2302      	movs	r3, #2
 8003b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b2a:	e112      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003b2c:	2304      	movs	r3, #4
 8003b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b32:	e10e      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003b34:	2308      	movs	r3, #8
 8003b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b3a:	e10a      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003b3c:	2310      	movs	r3, #16
 8003b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b42:	e106      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a7c      	ldr	r2, [pc, #496]	@ (8003d3c <UART_SetConfig+0x2d0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d138      	bne.n	8003bc0 <UART_SetConfig+0x154>
 8003b4e:	4b7a      	ldr	r3, [pc, #488]	@ (8003d38 <UART_SetConfig+0x2cc>)
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b54:	f003 030c 	and.w	r3, r3, #12
 8003b58:	2b0c      	cmp	r3, #12
 8003b5a:	d82d      	bhi.n	8003bb8 <UART_SetConfig+0x14c>
 8003b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b64 <UART_SetConfig+0xf8>)
 8003b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b62:	bf00      	nop
 8003b64:	08003b99 	.word	0x08003b99
 8003b68:	08003bb9 	.word	0x08003bb9
 8003b6c:	08003bb9 	.word	0x08003bb9
 8003b70:	08003bb9 	.word	0x08003bb9
 8003b74:	08003ba9 	.word	0x08003ba9
 8003b78:	08003bb9 	.word	0x08003bb9
 8003b7c:	08003bb9 	.word	0x08003bb9
 8003b80:	08003bb9 	.word	0x08003bb9
 8003b84:	08003ba1 	.word	0x08003ba1
 8003b88:	08003bb9 	.word	0x08003bb9
 8003b8c:	08003bb9 	.word	0x08003bb9
 8003b90:	08003bb9 	.word	0x08003bb9
 8003b94:	08003bb1 	.word	0x08003bb1
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b9e:	e0d8      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ba6:	e0d4      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003ba8:	2304      	movs	r3, #4
 8003baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bae:	e0d0      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003bb0:	2308      	movs	r3, #8
 8003bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bb6:	e0cc      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003bb8:	2310      	movs	r3, #16
 8003bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bbe:	e0c8      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a5e      	ldr	r2, [pc, #376]	@ (8003d40 <UART_SetConfig+0x2d4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d125      	bne.n	8003c16 <UART_SetConfig+0x1aa>
 8003bca:	4b5b      	ldr	r3, [pc, #364]	@ (8003d38 <UART_SetConfig+0x2cc>)
 8003bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003bd4:	2b30      	cmp	r3, #48	@ 0x30
 8003bd6:	d016      	beq.n	8003c06 <UART_SetConfig+0x19a>
 8003bd8:	2b30      	cmp	r3, #48	@ 0x30
 8003bda:	d818      	bhi.n	8003c0e <UART_SetConfig+0x1a2>
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d00a      	beq.n	8003bf6 <UART_SetConfig+0x18a>
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d814      	bhi.n	8003c0e <UART_SetConfig+0x1a2>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <UART_SetConfig+0x182>
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d008      	beq.n	8003bfe <UART_SetConfig+0x192>
 8003bec:	e00f      	b.n	8003c0e <UART_SetConfig+0x1a2>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bf4:	e0ad      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bfc:	e0a9      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003bfe:	2304      	movs	r3, #4
 8003c00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c04:	e0a5      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003c06:	2308      	movs	r3, #8
 8003c08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c0c:	e0a1      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003c0e:	2310      	movs	r3, #16
 8003c10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c14:	e09d      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a4a      	ldr	r2, [pc, #296]	@ (8003d44 <UART_SetConfig+0x2d8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d125      	bne.n	8003c6c <UART_SetConfig+0x200>
 8003c20:	4b45      	ldr	r3, [pc, #276]	@ (8003d38 <UART_SetConfig+0x2cc>)
 8003c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003c2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c2c:	d016      	beq.n	8003c5c <UART_SetConfig+0x1f0>
 8003c2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c30:	d818      	bhi.n	8003c64 <UART_SetConfig+0x1f8>
 8003c32:	2b80      	cmp	r3, #128	@ 0x80
 8003c34:	d00a      	beq.n	8003c4c <UART_SetConfig+0x1e0>
 8003c36:	2b80      	cmp	r3, #128	@ 0x80
 8003c38:	d814      	bhi.n	8003c64 <UART_SetConfig+0x1f8>
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <UART_SetConfig+0x1d8>
 8003c3e:	2b40      	cmp	r3, #64	@ 0x40
 8003c40:	d008      	beq.n	8003c54 <UART_SetConfig+0x1e8>
 8003c42:	e00f      	b.n	8003c64 <UART_SetConfig+0x1f8>
 8003c44:	2300      	movs	r3, #0
 8003c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c4a:	e082      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c52:	e07e      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003c54:	2304      	movs	r3, #4
 8003c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c5a:	e07a      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003c5c:	2308      	movs	r3, #8
 8003c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c62:	e076      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003c64:	2310      	movs	r3, #16
 8003c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c6a:	e072      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a35      	ldr	r2, [pc, #212]	@ (8003d48 <UART_SetConfig+0x2dc>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d12a      	bne.n	8003ccc <UART_SetConfig+0x260>
 8003c76:	4b30      	ldr	r3, [pc, #192]	@ (8003d38 <UART_SetConfig+0x2cc>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c84:	d01a      	beq.n	8003cbc <UART_SetConfig+0x250>
 8003c86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c8a:	d81b      	bhi.n	8003cc4 <UART_SetConfig+0x258>
 8003c8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c90:	d00c      	beq.n	8003cac <UART_SetConfig+0x240>
 8003c92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c96:	d815      	bhi.n	8003cc4 <UART_SetConfig+0x258>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <UART_SetConfig+0x238>
 8003c9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ca0:	d008      	beq.n	8003cb4 <UART_SetConfig+0x248>
 8003ca2:	e00f      	b.n	8003cc4 <UART_SetConfig+0x258>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003caa:	e052      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003cac:	2302      	movs	r3, #2
 8003cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cb2:	e04e      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cba:	e04a      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003cbc:	2308      	movs	r3, #8
 8003cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cc2:	e046      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cca:	e042      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a17      	ldr	r2, [pc, #92]	@ (8003d30 <UART_SetConfig+0x2c4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d13a      	bne.n	8003d4c <UART_SetConfig+0x2e0>
 8003cd6:	4b18      	ldr	r3, [pc, #96]	@ (8003d38 <UART_SetConfig+0x2cc>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cdc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ce0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ce4:	d01a      	beq.n	8003d1c <UART_SetConfig+0x2b0>
 8003ce6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003cea:	d81b      	bhi.n	8003d24 <UART_SetConfig+0x2b8>
 8003cec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cf0:	d00c      	beq.n	8003d0c <UART_SetConfig+0x2a0>
 8003cf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cf6:	d815      	bhi.n	8003d24 <UART_SetConfig+0x2b8>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <UART_SetConfig+0x298>
 8003cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d00:	d008      	beq.n	8003d14 <UART_SetConfig+0x2a8>
 8003d02:	e00f      	b.n	8003d24 <UART_SetConfig+0x2b8>
 8003d04:	2300      	movs	r3, #0
 8003d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d0a:	e022      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d12:	e01e      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003d14:	2304      	movs	r3, #4
 8003d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d1a:	e01a      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003d1c:	2308      	movs	r3, #8
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d22:	e016      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003d24:	2310      	movs	r3, #16
 8003d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d2a:	e012      	b.n	8003d52 <UART_SetConfig+0x2e6>
 8003d2c:	efff69f3 	.word	0xefff69f3
 8003d30:	40008000 	.word	0x40008000
 8003d34:	40013800 	.word	0x40013800
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	40004400 	.word	0x40004400
 8003d40:	40004800 	.word	0x40004800
 8003d44:	40004c00 	.word	0x40004c00
 8003d48:	40005000 	.word	0x40005000
 8003d4c:	2310      	movs	r3, #16
 8003d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a9f      	ldr	r2, [pc, #636]	@ (8003fd4 <UART_SetConfig+0x568>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d17a      	bne.n	8003e52 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d824      	bhi.n	8003dae <UART_SetConfig+0x342>
 8003d64:	a201      	add	r2, pc, #4	@ (adr r2, 8003d6c <UART_SetConfig+0x300>)
 8003d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6a:	bf00      	nop
 8003d6c:	08003d91 	.word	0x08003d91
 8003d70:	08003daf 	.word	0x08003daf
 8003d74:	08003d99 	.word	0x08003d99
 8003d78:	08003daf 	.word	0x08003daf
 8003d7c:	08003d9f 	.word	0x08003d9f
 8003d80:	08003daf 	.word	0x08003daf
 8003d84:	08003daf 	.word	0x08003daf
 8003d88:	08003daf 	.word	0x08003daf
 8003d8c:	08003da7 	.word	0x08003da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d90:	f7fe fcce 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 8003d94:	61f8      	str	r0, [r7, #28]
        break;
 8003d96:	e010      	b.n	8003dba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d98:	4b8f      	ldr	r3, [pc, #572]	@ (8003fd8 <UART_SetConfig+0x56c>)
 8003d9a:	61fb      	str	r3, [r7, #28]
        break;
 8003d9c:	e00d      	b.n	8003dba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d9e:	f7fe fc2f 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8003da2:	61f8      	str	r0, [r7, #28]
        break;
 8003da4:	e009      	b.n	8003dba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003da6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003daa:	61fb      	str	r3, [r7, #28]
        break;
 8003dac:	e005      	b.n	8003dba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003db8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80fb 	beq.w	8003fb8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	4413      	add	r3, r2
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d305      	bcc.n	8003dde <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d903      	bls.n	8003de6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003de4:	e0e8      	b.n	8003fb8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	2200      	movs	r2, #0
 8003dea:	461c      	mov	r4, r3
 8003dec:	4615      	mov	r5, r2
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	022b      	lsls	r3, r5, #8
 8003df8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003dfc:	0222      	lsls	r2, r4, #8
 8003dfe:	68f9      	ldr	r1, [r7, #12]
 8003e00:	6849      	ldr	r1, [r1, #4]
 8003e02:	0849      	lsrs	r1, r1, #1
 8003e04:	2000      	movs	r0, #0
 8003e06:	4688      	mov	r8, r1
 8003e08:	4681      	mov	r9, r0
 8003e0a:	eb12 0a08 	adds.w	sl, r2, r8
 8003e0e:	eb43 0b09 	adc.w	fp, r3, r9
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	603b      	str	r3, [r7, #0]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e20:	4650      	mov	r0, sl
 8003e22:	4659      	mov	r1, fp
 8003e24:	f7fc fa2c 	bl	8000280 <__aeabi_uldivmod>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e36:	d308      	bcc.n	8003e4a <UART_SetConfig+0x3de>
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e3e:	d204      	bcs.n	8003e4a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	60da      	str	r2, [r3, #12]
 8003e48:	e0b6      	b.n	8003fb8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e50:	e0b2      	b.n	8003fb8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e5a:	d15e      	bne.n	8003f1a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003e5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d828      	bhi.n	8003eb6 <UART_SetConfig+0x44a>
 8003e64:	a201      	add	r2, pc, #4	@ (adr r2, 8003e6c <UART_SetConfig+0x400>)
 8003e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6a:	bf00      	nop
 8003e6c:	08003e91 	.word	0x08003e91
 8003e70:	08003e99 	.word	0x08003e99
 8003e74:	08003ea1 	.word	0x08003ea1
 8003e78:	08003eb7 	.word	0x08003eb7
 8003e7c:	08003ea7 	.word	0x08003ea7
 8003e80:	08003eb7 	.word	0x08003eb7
 8003e84:	08003eb7 	.word	0x08003eb7
 8003e88:	08003eb7 	.word	0x08003eb7
 8003e8c:	08003eaf 	.word	0x08003eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e90:	f7fe fc4e 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 8003e94:	61f8      	str	r0, [r7, #28]
        break;
 8003e96:	e014      	b.n	8003ec2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e98:	f7fe fc60 	bl	800275c <HAL_RCC_GetPCLK2Freq>
 8003e9c:	61f8      	str	r0, [r7, #28]
        break;
 8003e9e:	e010      	b.n	8003ec2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea0:	4b4d      	ldr	r3, [pc, #308]	@ (8003fd8 <UART_SetConfig+0x56c>)
 8003ea2:	61fb      	str	r3, [r7, #28]
        break;
 8003ea4:	e00d      	b.n	8003ec2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ea6:	f7fe fbab 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8003eaa:	61f8      	str	r0, [r7, #28]
        break;
 8003eac:	e009      	b.n	8003ec2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eb2:	61fb      	str	r3, [r7, #28]
        break;
 8003eb4:	e005      	b.n	8003ec2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ec0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d077      	beq.n	8003fb8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	005a      	lsls	r2, r3, #1
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	085b      	lsrs	r3, r3, #1
 8003ed2:	441a      	add	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003edc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	2b0f      	cmp	r3, #15
 8003ee2:	d916      	bls.n	8003f12 <UART_SetConfig+0x4a6>
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eea:	d212      	bcs.n	8003f12 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	f023 030f 	bic.w	r3, r3, #15
 8003ef4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	085b      	lsrs	r3, r3, #1
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	8afb      	ldrh	r3, [r7, #22]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	8afa      	ldrh	r2, [r7, #22]
 8003f0e:	60da      	str	r2, [r3, #12]
 8003f10:	e052      	b.n	8003fb8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f18:	e04e      	b.n	8003fb8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f1a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d827      	bhi.n	8003f72 <UART_SetConfig+0x506>
 8003f22:	a201      	add	r2, pc, #4	@ (adr r2, 8003f28 <UART_SetConfig+0x4bc>)
 8003f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f28:	08003f4d 	.word	0x08003f4d
 8003f2c:	08003f55 	.word	0x08003f55
 8003f30:	08003f5d 	.word	0x08003f5d
 8003f34:	08003f73 	.word	0x08003f73
 8003f38:	08003f63 	.word	0x08003f63
 8003f3c:	08003f73 	.word	0x08003f73
 8003f40:	08003f73 	.word	0x08003f73
 8003f44:	08003f73 	.word	0x08003f73
 8003f48:	08003f6b 	.word	0x08003f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f4c:	f7fe fbf0 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 8003f50:	61f8      	str	r0, [r7, #28]
        break;
 8003f52:	e014      	b.n	8003f7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f54:	f7fe fc02 	bl	800275c <HAL_RCC_GetPCLK2Freq>
 8003f58:	61f8      	str	r0, [r7, #28]
        break;
 8003f5a:	e010      	b.n	8003f7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd8 <UART_SetConfig+0x56c>)
 8003f5e:	61fb      	str	r3, [r7, #28]
        break;
 8003f60:	e00d      	b.n	8003f7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f62:	f7fe fb4d 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8003f66:	61f8      	str	r0, [r7, #28]
        break;
 8003f68:	e009      	b.n	8003f7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f6e:	61fb      	str	r3, [r7, #28]
        break;
 8003f70:	e005      	b.n	8003f7e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f7c:	bf00      	nop
    }

    if (pclk != 0U)
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d019      	beq.n	8003fb8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	085a      	lsrs	r2, r3, #1
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	441a      	add	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f96:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	2b0f      	cmp	r3, #15
 8003f9c:	d909      	bls.n	8003fb2 <UART_SetConfig+0x546>
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fa4:	d205      	bcs.n	8003fb2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60da      	str	r2, [r3, #12]
 8003fb0:	e002      	b.n	8003fb8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003fc4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3728      	adds	r7, #40	@ 0x28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40008000 	.word	0x40008000
 8003fd8:	00f42400 	.word	0x00f42400

08003fdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d01a      	beq.n	80040f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040da:	d10a      	bne.n	80040f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
  }
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b098      	sub	sp, #96	@ 0x60
 8004124:	af02      	add	r7, sp, #8
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004130:	f7fd fa4e 	bl	80015d0 <HAL_GetTick>
 8004134:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b08      	cmp	r3, #8
 8004142:	d12e      	bne.n	80041a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004144:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800414c:	2200      	movs	r2, #0
 800414e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f88c 	bl	8004270 <UART_WaitOnFlagUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d021      	beq.n	80041a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800416c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800416e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004172:	653b      	str	r3, [r7, #80]	@ 0x50
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800417c:	647b      	str	r3, [r7, #68]	@ 0x44
 800417e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004182:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800418a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e6      	bne.n	800415e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2220      	movs	r2, #32
 8004194:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e062      	b.n	8004268 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d149      	bne.n	8004244 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041b8:	2200      	movs	r2, #0
 80041ba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f856 	bl	8004270 <UART_WaitOnFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d03c      	beq.n	8004244 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	e853 3f00 	ldrex	r3, [r3]
 80041d6:	623b      	str	r3, [r7, #32]
   return(result);
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	461a      	mov	r2, r3
 80041e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80041ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041f0:	e841 2300 	strex	r3, r2, [r1]
 80041f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e6      	bne.n	80041ca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3308      	adds	r3, #8
 8004202:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	60fb      	str	r3, [r7, #12]
   return(result);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0301 	bic.w	r3, r3, #1
 8004212:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3308      	adds	r3, #8
 800421a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800421c:	61fa      	str	r2, [r7, #28]
 800421e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	69b9      	ldr	r1, [r7, #24]
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	e841 2300 	strex	r3, r2, [r1]
 8004228:	617b      	str	r3, [r7, #20]
   return(result);
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e5      	bne.n	80041fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2220      	movs	r2, #32
 8004234:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e011      	b.n	8004268 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3758      	adds	r7, #88	@ 0x58
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004280:	e04f      	b.n	8004322 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004288:	d04b      	beq.n	8004322 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428a:	f7fd f9a1 	bl	80015d0 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	429a      	cmp	r2, r3
 8004298:	d302      	bcc.n	80042a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e04e      	b.n	8004342 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d037      	beq.n	8004322 <UART_WaitOnFlagUntilTimeout+0xb2>
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2b80      	cmp	r3, #128	@ 0x80
 80042b6:	d034      	beq.n	8004322 <UART_WaitOnFlagUntilTimeout+0xb2>
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b40      	cmp	r3, #64	@ 0x40
 80042bc:	d031      	beq.n	8004322 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d110      	bne.n	80042ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2208      	movs	r2, #8
 80042d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f838 	bl	800434a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2208      	movs	r2, #8
 80042de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e029      	b.n	8004342 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042fc:	d111      	bne.n	8004322 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004306:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 f81e 	bl	800434a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2220      	movs	r2, #32
 8004312:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e00f      	b.n	8004342 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	69da      	ldr	r2, [r3, #28]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4013      	ands	r3, r2
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	429a      	cmp	r2, r3
 8004330:	bf0c      	ite	eq
 8004332:	2301      	moveq	r3, #1
 8004334:	2300      	movne	r3, #0
 8004336:	b2db      	uxtb	r3, r3
 8004338:	461a      	mov	r2, r3
 800433a:	79fb      	ldrb	r3, [r7, #7]
 800433c:	429a      	cmp	r2, r3
 800433e:	d0a0      	beq.n	8004282 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800434a:	b480      	push	{r7}
 800434c:	b095      	sub	sp, #84	@ 0x54
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004362:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004366:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004370:	643b      	str	r3, [r7, #64]	@ 0x40
 8004372:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004374:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004376:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004378:	e841 2300 	strex	r3, r2, [r1]
 800437c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800437e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e6      	bne.n	8004352 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3308      	adds	r3, #8
 800438a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	e853 3f00 	ldrex	r3, [r3]
 8004392:	61fb      	str	r3, [r7, #28]
   return(result);
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f023 0301 	bic.w	r3, r3, #1
 800439a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3308      	adds	r3, #8
 80043a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043ac:	e841 2300 	strex	r3, r2, [r1]
 80043b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e5      	bne.n	8004384 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d118      	bne.n	80043f2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	e853 3f00 	ldrex	r3, [r3]
 80043cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	f023 0310 	bic.w	r3, r3, #16
 80043d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	461a      	mov	r2, r3
 80043dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043de:	61bb      	str	r3, [r7, #24]
 80043e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	6979      	ldr	r1, [r7, #20]
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	613b      	str	r3, [r7, #16]
   return(result);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e6      	bne.n	80043c0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004406:	bf00      	nop
 8004408:	3754      	adds	r7, #84	@ 0x54
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <_vsniprintf_r>:
 8004412:	b530      	push	{r4, r5, lr}
 8004414:	4614      	mov	r4, r2
 8004416:	2c00      	cmp	r4, #0
 8004418:	b09b      	sub	sp, #108	@ 0x6c
 800441a:	4605      	mov	r5, r0
 800441c:	461a      	mov	r2, r3
 800441e:	da05      	bge.n	800442c <_vsniprintf_r+0x1a>
 8004420:	238b      	movs	r3, #139	@ 0x8b
 8004422:	6003      	str	r3, [r0, #0]
 8004424:	f04f 30ff 	mov.w	r0, #4294967295
 8004428:	b01b      	add	sp, #108	@ 0x6c
 800442a:	bd30      	pop	{r4, r5, pc}
 800442c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004430:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004434:	bf14      	ite	ne
 8004436:	f104 33ff 	addne.w	r3, r4, #4294967295
 800443a:	4623      	moveq	r3, r4
 800443c:	9302      	str	r3, [sp, #8]
 800443e:	9305      	str	r3, [sp, #20]
 8004440:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004444:	9100      	str	r1, [sp, #0]
 8004446:	9104      	str	r1, [sp, #16]
 8004448:	f8ad 300e 	strh.w	r3, [sp, #14]
 800444c:	4669      	mov	r1, sp
 800444e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8004450:	f000 f9a0 	bl	8004794 <_svfiprintf_r>
 8004454:	1c43      	adds	r3, r0, #1
 8004456:	bfbc      	itt	lt
 8004458:	238b      	movlt	r3, #139	@ 0x8b
 800445a:	602b      	strlt	r3, [r5, #0]
 800445c:	2c00      	cmp	r4, #0
 800445e:	d0e3      	beq.n	8004428 <_vsniprintf_r+0x16>
 8004460:	9b00      	ldr	r3, [sp, #0]
 8004462:	2200      	movs	r2, #0
 8004464:	701a      	strb	r2, [r3, #0]
 8004466:	e7df      	b.n	8004428 <_vsniprintf_r+0x16>

08004468 <vsniprintf>:
 8004468:	b507      	push	{r0, r1, r2, lr}
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	4613      	mov	r3, r2
 800446e:	460a      	mov	r2, r1
 8004470:	4601      	mov	r1, r0
 8004472:	4803      	ldr	r0, [pc, #12]	@ (8004480 <vsniprintf+0x18>)
 8004474:	6800      	ldr	r0, [r0, #0]
 8004476:	f7ff ffcc 	bl	8004412 <_vsniprintf_r>
 800447a:	b003      	add	sp, #12
 800447c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004480:	20000024 	.word	0x20000024

08004484 <memset>:
 8004484:	4402      	add	r2, r0
 8004486:	4603      	mov	r3, r0
 8004488:	4293      	cmp	r3, r2
 800448a:	d100      	bne.n	800448e <memset+0xa>
 800448c:	4770      	bx	lr
 800448e:	f803 1b01 	strb.w	r1, [r3], #1
 8004492:	e7f9      	b.n	8004488 <memset+0x4>

08004494 <__errno>:
 8004494:	4b01      	ldr	r3, [pc, #4]	@ (800449c <__errno+0x8>)
 8004496:	6818      	ldr	r0, [r3, #0]
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	20000024 	.word	0x20000024

080044a0 <__libc_init_array>:
 80044a0:	b570      	push	{r4, r5, r6, lr}
 80044a2:	4d0d      	ldr	r5, [pc, #52]	@ (80044d8 <__libc_init_array+0x38>)
 80044a4:	4c0d      	ldr	r4, [pc, #52]	@ (80044dc <__libc_init_array+0x3c>)
 80044a6:	1b64      	subs	r4, r4, r5
 80044a8:	10a4      	asrs	r4, r4, #2
 80044aa:	2600      	movs	r6, #0
 80044ac:	42a6      	cmp	r6, r4
 80044ae:	d109      	bne.n	80044c4 <__libc_init_array+0x24>
 80044b0:	4d0b      	ldr	r5, [pc, #44]	@ (80044e0 <__libc_init_array+0x40>)
 80044b2:	4c0c      	ldr	r4, [pc, #48]	@ (80044e4 <__libc_init_array+0x44>)
 80044b4:	f000 fc66 	bl	8004d84 <_init>
 80044b8:	1b64      	subs	r4, r4, r5
 80044ba:	10a4      	asrs	r4, r4, #2
 80044bc:	2600      	movs	r6, #0
 80044be:	42a6      	cmp	r6, r4
 80044c0:	d105      	bne.n	80044ce <__libc_init_array+0x2e>
 80044c2:	bd70      	pop	{r4, r5, r6, pc}
 80044c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c8:	4798      	blx	r3
 80044ca:	3601      	adds	r6, #1
 80044cc:	e7ee      	b.n	80044ac <__libc_init_array+0xc>
 80044ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d2:	4798      	blx	r3
 80044d4:	3601      	adds	r6, #1
 80044d6:	e7f2      	b.n	80044be <__libc_init_array+0x1e>
 80044d8:	0800f70c 	.word	0x0800f70c
 80044dc:	0800f70c 	.word	0x0800f70c
 80044e0:	0800f70c 	.word	0x0800f70c
 80044e4:	0800f710 	.word	0x0800f710

080044e8 <__retarget_lock_acquire_recursive>:
 80044e8:	4770      	bx	lr

080044ea <__retarget_lock_release_recursive>:
 80044ea:	4770      	bx	lr

080044ec <_free_r>:
 80044ec:	b538      	push	{r3, r4, r5, lr}
 80044ee:	4605      	mov	r5, r0
 80044f0:	2900      	cmp	r1, #0
 80044f2:	d041      	beq.n	8004578 <_free_r+0x8c>
 80044f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044f8:	1f0c      	subs	r4, r1, #4
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	bfb8      	it	lt
 80044fe:	18e4      	addlt	r4, r4, r3
 8004500:	f000 f8e0 	bl	80046c4 <__malloc_lock>
 8004504:	4a1d      	ldr	r2, [pc, #116]	@ (800457c <_free_r+0x90>)
 8004506:	6813      	ldr	r3, [r2, #0]
 8004508:	b933      	cbnz	r3, 8004518 <_free_r+0x2c>
 800450a:	6063      	str	r3, [r4, #4]
 800450c:	6014      	str	r4, [r2, #0]
 800450e:	4628      	mov	r0, r5
 8004510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004514:	f000 b8dc 	b.w	80046d0 <__malloc_unlock>
 8004518:	42a3      	cmp	r3, r4
 800451a:	d908      	bls.n	800452e <_free_r+0x42>
 800451c:	6820      	ldr	r0, [r4, #0]
 800451e:	1821      	adds	r1, r4, r0
 8004520:	428b      	cmp	r3, r1
 8004522:	bf01      	itttt	eq
 8004524:	6819      	ldreq	r1, [r3, #0]
 8004526:	685b      	ldreq	r3, [r3, #4]
 8004528:	1809      	addeq	r1, r1, r0
 800452a:	6021      	streq	r1, [r4, #0]
 800452c:	e7ed      	b.n	800450a <_free_r+0x1e>
 800452e:	461a      	mov	r2, r3
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	b10b      	cbz	r3, 8004538 <_free_r+0x4c>
 8004534:	42a3      	cmp	r3, r4
 8004536:	d9fa      	bls.n	800452e <_free_r+0x42>
 8004538:	6811      	ldr	r1, [r2, #0]
 800453a:	1850      	adds	r0, r2, r1
 800453c:	42a0      	cmp	r0, r4
 800453e:	d10b      	bne.n	8004558 <_free_r+0x6c>
 8004540:	6820      	ldr	r0, [r4, #0]
 8004542:	4401      	add	r1, r0
 8004544:	1850      	adds	r0, r2, r1
 8004546:	4283      	cmp	r3, r0
 8004548:	6011      	str	r1, [r2, #0]
 800454a:	d1e0      	bne.n	800450e <_free_r+0x22>
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	6053      	str	r3, [r2, #4]
 8004552:	4408      	add	r0, r1
 8004554:	6010      	str	r0, [r2, #0]
 8004556:	e7da      	b.n	800450e <_free_r+0x22>
 8004558:	d902      	bls.n	8004560 <_free_r+0x74>
 800455a:	230c      	movs	r3, #12
 800455c:	602b      	str	r3, [r5, #0]
 800455e:	e7d6      	b.n	800450e <_free_r+0x22>
 8004560:	6820      	ldr	r0, [r4, #0]
 8004562:	1821      	adds	r1, r4, r0
 8004564:	428b      	cmp	r3, r1
 8004566:	bf04      	itt	eq
 8004568:	6819      	ldreq	r1, [r3, #0]
 800456a:	685b      	ldreq	r3, [r3, #4]
 800456c:	6063      	str	r3, [r4, #4]
 800456e:	bf04      	itt	eq
 8004570:	1809      	addeq	r1, r1, r0
 8004572:	6021      	streq	r1, [r4, #0]
 8004574:	6054      	str	r4, [r2, #4]
 8004576:	e7ca      	b.n	800450e <_free_r+0x22>
 8004578:	bd38      	pop	{r3, r4, r5, pc}
 800457a:	bf00      	nop
 800457c:	200002c8 	.word	0x200002c8

08004580 <sbrk_aligned>:
 8004580:	b570      	push	{r4, r5, r6, lr}
 8004582:	4e0f      	ldr	r6, [pc, #60]	@ (80045c0 <sbrk_aligned+0x40>)
 8004584:	460c      	mov	r4, r1
 8004586:	6831      	ldr	r1, [r6, #0]
 8004588:	4605      	mov	r5, r0
 800458a:	b911      	cbnz	r1, 8004592 <sbrk_aligned+0x12>
 800458c:	f000 fba6 	bl	8004cdc <_sbrk_r>
 8004590:	6030      	str	r0, [r6, #0]
 8004592:	4621      	mov	r1, r4
 8004594:	4628      	mov	r0, r5
 8004596:	f000 fba1 	bl	8004cdc <_sbrk_r>
 800459a:	1c43      	adds	r3, r0, #1
 800459c:	d103      	bne.n	80045a6 <sbrk_aligned+0x26>
 800459e:	f04f 34ff 	mov.w	r4, #4294967295
 80045a2:	4620      	mov	r0, r4
 80045a4:	bd70      	pop	{r4, r5, r6, pc}
 80045a6:	1cc4      	adds	r4, r0, #3
 80045a8:	f024 0403 	bic.w	r4, r4, #3
 80045ac:	42a0      	cmp	r0, r4
 80045ae:	d0f8      	beq.n	80045a2 <sbrk_aligned+0x22>
 80045b0:	1a21      	subs	r1, r4, r0
 80045b2:	4628      	mov	r0, r5
 80045b4:	f000 fb92 	bl	8004cdc <_sbrk_r>
 80045b8:	3001      	adds	r0, #1
 80045ba:	d1f2      	bne.n	80045a2 <sbrk_aligned+0x22>
 80045bc:	e7ef      	b.n	800459e <sbrk_aligned+0x1e>
 80045be:	bf00      	nop
 80045c0:	200002c4 	.word	0x200002c4

080045c4 <_malloc_r>:
 80045c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045c8:	1ccd      	adds	r5, r1, #3
 80045ca:	f025 0503 	bic.w	r5, r5, #3
 80045ce:	3508      	adds	r5, #8
 80045d0:	2d0c      	cmp	r5, #12
 80045d2:	bf38      	it	cc
 80045d4:	250c      	movcc	r5, #12
 80045d6:	2d00      	cmp	r5, #0
 80045d8:	4606      	mov	r6, r0
 80045da:	db01      	blt.n	80045e0 <_malloc_r+0x1c>
 80045dc:	42a9      	cmp	r1, r5
 80045de:	d904      	bls.n	80045ea <_malloc_r+0x26>
 80045e0:	230c      	movs	r3, #12
 80045e2:	6033      	str	r3, [r6, #0]
 80045e4:	2000      	movs	r0, #0
 80045e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80046c0 <_malloc_r+0xfc>
 80045ee:	f000 f869 	bl	80046c4 <__malloc_lock>
 80045f2:	f8d8 3000 	ldr.w	r3, [r8]
 80045f6:	461c      	mov	r4, r3
 80045f8:	bb44      	cbnz	r4, 800464c <_malloc_r+0x88>
 80045fa:	4629      	mov	r1, r5
 80045fc:	4630      	mov	r0, r6
 80045fe:	f7ff ffbf 	bl	8004580 <sbrk_aligned>
 8004602:	1c43      	adds	r3, r0, #1
 8004604:	4604      	mov	r4, r0
 8004606:	d158      	bne.n	80046ba <_malloc_r+0xf6>
 8004608:	f8d8 4000 	ldr.w	r4, [r8]
 800460c:	4627      	mov	r7, r4
 800460e:	2f00      	cmp	r7, #0
 8004610:	d143      	bne.n	800469a <_malloc_r+0xd6>
 8004612:	2c00      	cmp	r4, #0
 8004614:	d04b      	beq.n	80046ae <_malloc_r+0xea>
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	4639      	mov	r1, r7
 800461a:	4630      	mov	r0, r6
 800461c:	eb04 0903 	add.w	r9, r4, r3
 8004620:	f000 fb5c 	bl	8004cdc <_sbrk_r>
 8004624:	4581      	cmp	r9, r0
 8004626:	d142      	bne.n	80046ae <_malloc_r+0xea>
 8004628:	6821      	ldr	r1, [r4, #0]
 800462a:	1a6d      	subs	r5, r5, r1
 800462c:	4629      	mov	r1, r5
 800462e:	4630      	mov	r0, r6
 8004630:	f7ff ffa6 	bl	8004580 <sbrk_aligned>
 8004634:	3001      	adds	r0, #1
 8004636:	d03a      	beq.n	80046ae <_malloc_r+0xea>
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	442b      	add	r3, r5
 800463c:	6023      	str	r3, [r4, #0]
 800463e:	f8d8 3000 	ldr.w	r3, [r8]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	bb62      	cbnz	r2, 80046a0 <_malloc_r+0xdc>
 8004646:	f8c8 7000 	str.w	r7, [r8]
 800464a:	e00f      	b.n	800466c <_malloc_r+0xa8>
 800464c:	6822      	ldr	r2, [r4, #0]
 800464e:	1b52      	subs	r2, r2, r5
 8004650:	d420      	bmi.n	8004694 <_malloc_r+0xd0>
 8004652:	2a0b      	cmp	r2, #11
 8004654:	d917      	bls.n	8004686 <_malloc_r+0xc2>
 8004656:	1961      	adds	r1, r4, r5
 8004658:	42a3      	cmp	r3, r4
 800465a:	6025      	str	r5, [r4, #0]
 800465c:	bf18      	it	ne
 800465e:	6059      	strne	r1, [r3, #4]
 8004660:	6863      	ldr	r3, [r4, #4]
 8004662:	bf08      	it	eq
 8004664:	f8c8 1000 	streq.w	r1, [r8]
 8004668:	5162      	str	r2, [r4, r5]
 800466a:	604b      	str	r3, [r1, #4]
 800466c:	4630      	mov	r0, r6
 800466e:	f000 f82f 	bl	80046d0 <__malloc_unlock>
 8004672:	f104 000b 	add.w	r0, r4, #11
 8004676:	1d23      	adds	r3, r4, #4
 8004678:	f020 0007 	bic.w	r0, r0, #7
 800467c:	1ac2      	subs	r2, r0, r3
 800467e:	bf1c      	itt	ne
 8004680:	1a1b      	subne	r3, r3, r0
 8004682:	50a3      	strne	r3, [r4, r2]
 8004684:	e7af      	b.n	80045e6 <_malloc_r+0x22>
 8004686:	6862      	ldr	r2, [r4, #4]
 8004688:	42a3      	cmp	r3, r4
 800468a:	bf0c      	ite	eq
 800468c:	f8c8 2000 	streq.w	r2, [r8]
 8004690:	605a      	strne	r2, [r3, #4]
 8004692:	e7eb      	b.n	800466c <_malloc_r+0xa8>
 8004694:	4623      	mov	r3, r4
 8004696:	6864      	ldr	r4, [r4, #4]
 8004698:	e7ae      	b.n	80045f8 <_malloc_r+0x34>
 800469a:	463c      	mov	r4, r7
 800469c:	687f      	ldr	r7, [r7, #4]
 800469e:	e7b6      	b.n	800460e <_malloc_r+0x4a>
 80046a0:	461a      	mov	r2, r3
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	42a3      	cmp	r3, r4
 80046a6:	d1fb      	bne.n	80046a0 <_malloc_r+0xdc>
 80046a8:	2300      	movs	r3, #0
 80046aa:	6053      	str	r3, [r2, #4]
 80046ac:	e7de      	b.n	800466c <_malloc_r+0xa8>
 80046ae:	230c      	movs	r3, #12
 80046b0:	6033      	str	r3, [r6, #0]
 80046b2:	4630      	mov	r0, r6
 80046b4:	f000 f80c 	bl	80046d0 <__malloc_unlock>
 80046b8:	e794      	b.n	80045e4 <_malloc_r+0x20>
 80046ba:	6005      	str	r5, [r0, #0]
 80046bc:	e7d6      	b.n	800466c <_malloc_r+0xa8>
 80046be:	bf00      	nop
 80046c0:	200002c8 	.word	0x200002c8

080046c4 <__malloc_lock>:
 80046c4:	4801      	ldr	r0, [pc, #4]	@ (80046cc <__malloc_lock+0x8>)
 80046c6:	f7ff bf0f 	b.w	80044e8 <__retarget_lock_acquire_recursive>
 80046ca:	bf00      	nop
 80046cc:	200002c0 	.word	0x200002c0

080046d0 <__malloc_unlock>:
 80046d0:	4801      	ldr	r0, [pc, #4]	@ (80046d8 <__malloc_unlock+0x8>)
 80046d2:	f7ff bf0a 	b.w	80044ea <__retarget_lock_release_recursive>
 80046d6:	bf00      	nop
 80046d8:	200002c0 	.word	0x200002c0

080046dc <__ssputs_r>:
 80046dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e0:	688e      	ldr	r6, [r1, #8]
 80046e2:	461f      	mov	r7, r3
 80046e4:	42be      	cmp	r6, r7
 80046e6:	680b      	ldr	r3, [r1, #0]
 80046e8:	4682      	mov	sl, r0
 80046ea:	460c      	mov	r4, r1
 80046ec:	4690      	mov	r8, r2
 80046ee:	d82d      	bhi.n	800474c <__ssputs_r+0x70>
 80046f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80046f8:	d026      	beq.n	8004748 <__ssputs_r+0x6c>
 80046fa:	6965      	ldr	r5, [r4, #20]
 80046fc:	6909      	ldr	r1, [r1, #16]
 80046fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004702:	eba3 0901 	sub.w	r9, r3, r1
 8004706:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800470a:	1c7b      	adds	r3, r7, #1
 800470c:	444b      	add	r3, r9
 800470e:	106d      	asrs	r5, r5, #1
 8004710:	429d      	cmp	r5, r3
 8004712:	bf38      	it	cc
 8004714:	461d      	movcc	r5, r3
 8004716:	0553      	lsls	r3, r2, #21
 8004718:	d527      	bpl.n	800476a <__ssputs_r+0x8e>
 800471a:	4629      	mov	r1, r5
 800471c:	f7ff ff52 	bl	80045c4 <_malloc_r>
 8004720:	4606      	mov	r6, r0
 8004722:	b360      	cbz	r0, 800477e <__ssputs_r+0xa2>
 8004724:	6921      	ldr	r1, [r4, #16]
 8004726:	464a      	mov	r2, r9
 8004728:	f000 fae8 	bl	8004cfc <memcpy>
 800472c:	89a3      	ldrh	r3, [r4, #12]
 800472e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004736:	81a3      	strh	r3, [r4, #12]
 8004738:	6126      	str	r6, [r4, #16]
 800473a:	6165      	str	r5, [r4, #20]
 800473c:	444e      	add	r6, r9
 800473e:	eba5 0509 	sub.w	r5, r5, r9
 8004742:	6026      	str	r6, [r4, #0]
 8004744:	60a5      	str	r5, [r4, #8]
 8004746:	463e      	mov	r6, r7
 8004748:	42be      	cmp	r6, r7
 800474a:	d900      	bls.n	800474e <__ssputs_r+0x72>
 800474c:	463e      	mov	r6, r7
 800474e:	6820      	ldr	r0, [r4, #0]
 8004750:	4632      	mov	r2, r6
 8004752:	4641      	mov	r1, r8
 8004754:	f000 faa8 	bl	8004ca8 <memmove>
 8004758:	68a3      	ldr	r3, [r4, #8]
 800475a:	1b9b      	subs	r3, r3, r6
 800475c:	60a3      	str	r3, [r4, #8]
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	4433      	add	r3, r6
 8004762:	6023      	str	r3, [r4, #0]
 8004764:	2000      	movs	r0, #0
 8004766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800476a:	462a      	mov	r2, r5
 800476c:	f000 fad4 	bl	8004d18 <_realloc_r>
 8004770:	4606      	mov	r6, r0
 8004772:	2800      	cmp	r0, #0
 8004774:	d1e0      	bne.n	8004738 <__ssputs_r+0x5c>
 8004776:	6921      	ldr	r1, [r4, #16]
 8004778:	4650      	mov	r0, sl
 800477a:	f7ff feb7 	bl	80044ec <_free_r>
 800477e:	230c      	movs	r3, #12
 8004780:	f8ca 3000 	str.w	r3, [sl]
 8004784:	89a3      	ldrh	r3, [r4, #12]
 8004786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800478a:	81a3      	strh	r3, [r4, #12]
 800478c:	f04f 30ff 	mov.w	r0, #4294967295
 8004790:	e7e9      	b.n	8004766 <__ssputs_r+0x8a>
	...

08004794 <_svfiprintf_r>:
 8004794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004798:	4698      	mov	r8, r3
 800479a:	898b      	ldrh	r3, [r1, #12]
 800479c:	061b      	lsls	r3, r3, #24
 800479e:	b09d      	sub	sp, #116	@ 0x74
 80047a0:	4607      	mov	r7, r0
 80047a2:	460d      	mov	r5, r1
 80047a4:	4614      	mov	r4, r2
 80047a6:	d510      	bpl.n	80047ca <_svfiprintf_r+0x36>
 80047a8:	690b      	ldr	r3, [r1, #16]
 80047aa:	b973      	cbnz	r3, 80047ca <_svfiprintf_r+0x36>
 80047ac:	2140      	movs	r1, #64	@ 0x40
 80047ae:	f7ff ff09 	bl	80045c4 <_malloc_r>
 80047b2:	6028      	str	r0, [r5, #0]
 80047b4:	6128      	str	r0, [r5, #16]
 80047b6:	b930      	cbnz	r0, 80047c6 <_svfiprintf_r+0x32>
 80047b8:	230c      	movs	r3, #12
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	f04f 30ff 	mov.w	r0, #4294967295
 80047c0:	b01d      	add	sp, #116	@ 0x74
 80047c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047c6:	2340      	movs	r3, #64	@ 0x40
 80047c8:	616b      	str	r3, [r5, #20]
 80047ca:	2300      	movs	r3, #0
 80047cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80047ce:	2320      	movs	r3, #32
 80047d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80047d8:	2330      	movs	r3, #48	@ 0x30
 80047da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004978 <_svfiprintf_r+0x1e4>
 80047de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047e2:	f04f 0901 	mov.w	r9, #1
 80047e6:	4623      	mov	r3, r4
 80047e8:	469a      	mov	sl, r3
 80047ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047ee:	b10a      	cbz	r2, 80047f4 <_svfiprintf_r+0x60>
 80047f0:	2a25      	cmp	r2, #37	@ 0x25
 80047f2:	d1f9      	bne.n	80047e8 <_svfiprintf_r+0x54>
 80047f4:	ebba 0b04 	subs.w	fp, sl, r4
 80047f8:	d00b      	beq.n	8004812 <_svfiprintf_r+0x7e>
 80047fa:	465b      	mov	r3, fp
 80047fc:	4622      	mov	r2, r4
 80047fe:	4629      	mov	r1, r5
 8004800:	4638      	mov	r0, r7
 8004802:	f7ff ff6b 	bl	80046dc <__ssputs_r>
 8004806:	3001      	adds	r0, #1
 8004808:	f000 80a7 	beq.w	800495a <_svfiprintf_r+0x1c6>
 800480c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800480e:	445a      	add	r2, fp
 8004810:	9209      	str	r2, [sp, #36]	@ 0x24
 8004812:	f89a 3000 	ldrb.w	r3, [sl]
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 809f 	beq.w	800495a <_svfiprintf_r+0x1c6>
 800481c:	2300      	movs	r3, #0
 800481e:	f04f 32ff 	mov.w	r2, #4294967295
 8004822:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004826:	f10a 0a01 	add.w	sl, sl, #1
 800482a:	9304      	str	r3, [sp, #16]
 800482c:	9307      	str	r3, [sp, #28]
 800482e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004832:	931a      	str	r3, [sp, #104]	@ 0x68
 8004834:	4654      	mov	r4, sl
 8004836:	2205      	movs	r2, #5
 8004838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800483c:	484e      	ldr	r0, [pc, #312]	@ (8004978 <_svfiprintf_r+0x1e4>)
 800483e:	f7fb fccf 	bl	80001e0 <memchr>
 8004842:	9a04      	ldr	r2, [sp, #16]
 8004844:	b9d8      	cbnz	r0, 800487e <_svfiprintf_r+0xea>
 8004846:	06d0      	lsls	r0, r2, #27
 8004848:	bf44      	itt	mi
 800484a:	2320      	movmi	r3, #32
 800484c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004850:	0711      	lsls	r1, r2, #28
 8004852:	bf44      	itt	mi
 8004854:	232b      	movmi	r3, #43	@ 0x2b
 8004856:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800485a:	f89a 3000 	ldrb.w	r3, [sl]
 800485e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004860:	d015      	beq.n	800488e <_svfiprintf_r+0xfa>
 8004862:	9a07      	ldr	r2, [sp, #28]
 8004864:	4654      	mov	r4, sl
 8004866:	2000      	movs	r0, #0
 8004868:	f04f 0c0a 	mov.w	ip, #10
 800486c:	4621      	mov	r1, r4
 800486e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004872:	3b30      	subs	r3, #48	@ 0x30
 8004874:	2b09      	cmp	r3, #9
 8004876:	d94b      	bls.n	8004910 <_svfiprintf_r+0x17c>
 8004878:	b1b0      	cbz	r0, 80048a8 <_svfiprintf_r+0x114>
 800487a:	9207      	str	r2, [sp, #28]
 800487c:	e014      	b.n	80048a8 <_svfiprintf_r+0x114>
 800487e:	eba0 0308 	sub.w	r3, r0, r8
 8004882:	fa09 f303 	lsl.w	r3, r9, r3
 8004886:	4313      	orrs	r3, r2
 8004888:	9304      	str	r3, [sp, #16]
 800488a:	46a2      	mov	sl, r4
 800488c:	e7d2      	b.n	8004834 <_svfiprintf_r+0xa0>
 800488e:	9b03      	ldr	r3, [sp, #12]
 8004890:	1d19      	adds	r1, r3, #4
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	9103      	str	r1, [sp, #12]
 8004896:	2b00      	cmp	r3, #0
 8004898:	bfbb      	ittet	lt
 800489a:	425b      	neglt	r3, r3
 800489c:	f042 0202 	orrlt.w	r2, r2, #2
 80048a0:	9307      	strge	r3, [sp, #28]
 80048a2:	9307      	strlt	r3, [sp, #28]
 80048a4:	bfb8      	it	lt
 80048a6:	9204      	strlt	r2, [sp, #16]
 80048a8:	7823      	ldrb	r3, [r4, #0]
 80048aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80048ac:	d10a      	bne.n	80048c4 <_svfiprintf_r+0x130>
 80048ae:	7863      	ldrb	r3, [r4, #1]
 80048b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80048b2:	d132      	bne.n	800491a <_svfiprintf_r+0x186>
 80048b4:	9b03      	ldr	r3, [sp, #12]
 80048b6:	1d1a      	adds	r2, r3, #4
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	9203      	str	r2, [sp, #12]
 80048bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80048c0:	3402      	adds	r4, #2
 80048c2:	9305      	str	r3, [sp, #20]
 80048c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004988 <_svfiprintf_r+0x1f4>
 80048c8:	7821      	ldrb	r1, [r4, #0]
 80048ca:	2203      	movs	r2, #3
 80048cc:	4650      	mov	r0, sl
 80048ce:	f7fb fc87 	bl	80001e0 <memchr>
 80048d2:	b138      	cbz	r0, 80048e4 <_svfiprintf_r+0x150>
 80048d4:	9b04      	ldr	r3, [sp, #16]
 80048d6:	eba0 000a 	sub.w	r0, r0, sl
 80048da:	2240      	movs	r2, #64	@ 0x40
 80048dc:	4082      	lsls	r2, r0
 80048de:	4313      	orrs	r3, r2
 80048e0:	3401      	adds	r4, #1
 80048e2:	9304      	str	r3, [sp, #16]
 80048e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048e8:	4824      	ldr	r0, [pc, #144]	@ (800497c <_svfiprintf_r+0x1e8>)
 80048ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048ee:	2206      	movs	r2, #6
 80048f0:	f7fb fc76 	bl	80001e0 <memchr>
 80048f4:	2800      	cmp	r0, #0
 80048f6:	d036      	beq.n	8004966 <_svfiprintf_r+0x1d2>
 80048f8:	4b21      	ldr	r3, [pc, #132]	@ (8004980 <_svfiprintf_r+0x1ec>)
 80048fa:	bb1b      	cbnz	r3, 8004944 <_svfiprintf_r+0x1b0>
 80048fc:	9b03      	ldr	r3, [sp, #12]
 80048fe:	3307      	adds	r3, #7
 8004900:	f023 0307 	bic.w	r3, r3, #7
 8004904:	3308      	adds	r3, #8
 8004906:	9303      	str	r3, [sp, #12]
 8004908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800490a:	4433      	add	r3, r6
 800490c:	9309      	str	r3, [sp, #36]	@ 0x24
 800490e:	e76a      	b.n	80047e6 <_svfiprintf_r+0x52>
 8004910:	fb0c 3202 	mla	r2, ip, r2, r3
 8004914:	460c      	mov	r4, r1
 8004916:	2001      	movs	r0, #1
 8004918:	e7a8      	b.n	800486c <_svfiprintf_r+0xd8>
 800491a:	2300      	movs	r3, #0
 800491c:	3401      	adds	r4, #1
 800491e:	9305      	str	r3, [sp, #20]
 8004920:	4619      	mov	r1, r3
 8004922:	f04f 0c0a 	mov.w	ip, #10
 8004926:	4620      	mov	r0, r4
 8004928:	f810 2b01 	ldrb.w	r2, [r0], #1
 800492c:	3a30      	subs	r2, #48	@ 0x30
 800492e:	2a09      	cmp	r2, #9
 8004930:	d903      	bls.n	800493a <_svfiprintf_r+0x1a6>
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0c6      	beq.n	80048c4 <_svfiprintf_r+0x130>
 8004936:	9105      	str	r1, [sp, #20]
 8004938:	e7c4      	b.n	80048c4 <_svfiprintf_r+0x130>
 800493a:	fb0c 2101 	mla	r1, ip, r1, r2
 800493e:	4604      	mov	r4, r0
 8004940:	2301      	movs	r3, #1
 8004942:	e7f0      	b.n	8004926 <_svfiprintf_r+0x192>
 8004944:	ab03      	add	r3, sp, #12
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	462a      	mov	r2, r5
 800494a:	4b0e      	ldr	r3, [pc, #56]	@ (8004984 <_svfiprintf_r+0x1f0>)
 800494c:	a904      	add	r1, sp, #16
 800494e:	4638      	mov	r0, r7
 8004950:	f3af 8000 	nop.w
 8004954:	1c42      	adds	r2, r0, #1
 8004956:	4606      	mov	r6, r0
 8004958:	d1d6      	bne.n	8004908 <_svfiprintf_r+0x174>
 800495a:	89ab      	ldrh	r3, [r5, #12]
 800495c:	065b      	lsls	r3, r3, #25
 800495e:	f53f af2d 	bmi.w	80047bc <_svfiprintf_r+0x28>
 8004962:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004964:	e72c      	b.n	80047c0 <_svfiprintf_r+0x2c>
 8004966:	ab03      	add	r3, sp, #12
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	462a      	mov	r2, r5
 800496c:	4b05      	ldr	r3, [pc, #20]	@ (8004984 <_svfiprintf_r+0x1f0>)
 800496e:	a904      	add	r1, sp, #16
 8004970:	4638      	mov	r0, r7
 8004972:	f000 f879 	bl	8004a68 <_printf_i>
 8004976:	e7ed      	b.n	8004954 <_svfiprintf_r+0x1c0>
 8004978:	0800f6d0 	.word	0x0800f6d0
 800497c:	0800f6da 	.word	0x0800f6da
 8004980:	00000000 	.word	0x00000000
 8004984:	080046dd 	.word	0x080046dd
 8004988:	0800f6d6 	.word	0x0800f6d6

0800498c <_printf_common>:
 800498c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004990:	4616      	mov	r6, r2
 8004992:	4698      	mov	r8, r3
 8004994:	688a      	ldr	r2, [r1, #8]
 8004996:	690b      	ldr	r3, [r1, #16]
 8004998:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800499c:	4293      	cmp	r3, r2
 800499e:	bfb8      	it	lt
 80049a0:	4613      	movlt	r3, r2
 80049a2:	6033      	str	r3, [r6, #0]
 80049a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80049a8:	4607      	mov	r7, r0
 80049aa:	460c      	mov	r4, r1
 80049ac:	b10a      	cbz	r2, 80049b2 <_printf_common+0x26>
 80049ae:	3301      	adds	r3, #1
 80049b0:	6033      	str	r3, [r6, #0]
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	0699      	lsls	r1, r3, #26
 80049b6:	bf42      	ittt	mi
 80049b8:	6833      	ldrmi	r3, [r6, #0]
 80049ba:	3302      	addmi	r3, #2
 80049bc:	6033      	strmi	r3, [r6, #0]
 80049be:	6825      	ldr	r5, [r4, #0]
 80049c0:	f015 0506 	ands.w	r5, r5, #6
 80049c4:	d106      	bne.n	80049d4 <_printf_common+0x48>
 80049c6:	f104 0a19 	add.w	sl, r4, #25
 80049ca:	68e3      	ldr	r3, [r4, #12]
 80049cc:	6832      	ldr	r2, [r6, #0]
 80049ce:	1a9b      	subs	r3, r3, r2
 80049d0:	42ab      	cmp	r3, r5
 80049d2:	dc26      	bgt.n	8004a22 <_printf_common+0x96>
 80049d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049d8:	6822      	ldr	r2, [r4, #0]
 80049da:	3b00      	subs	r3, #0
 80049dc:	bf18      	it	ne
 80049de:	2301      	movne	r3, #1
 80049e0:	0692      	lsls	r2, r2, #26
 80049e2:	d42b      	bmi.n	8004a3c <_printf_common+0xb0>
 80049e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049e8:	4641      	mov	r1, r8
 80049ea:	4638      	mov	r0, r7
 80049ec:	47c8      	blx	r9
 80049ee:	3001      	adds	r0, #1
 80049f0:	d01e      	beq.n	8004a30 <_printf_common+0xa4>
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	6922      	ldr	r2, [r4, #16]
 80049f6:	f003 0306 	and.w	r3, r3, #6
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	bf02      	ittt	eq
 80049fe:	68e5      	ldreq	r5, [r4, #12]
 8004a00:	6833      	ldreq	r3, [r6, #0]
 8004a02:	1aed      	subeq	r5, r5, r3
 8004a04:	68a3      	ldr	r3, [r4, #8]
 8004a06:	bf0c      	ite	eq
 8004a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a0c:	2500      	movne	r5, #0
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	bfc4      	itt	gt
 8004a12:	1a9b      	subgt	r3, r3, r2
 8004a14:	18ed      	addgt	r5, r5, r3
 8004a16:	2600      	movs	r6, #0
 8004a18:	341a      	adds	r4, #26
 8004a1a:	42b5      	cmp	r5, r6
 8004a1c:	d11a      	bne.n	8004a54 <_printf_common+0xc8>
 8004a1e:	2000      	movs	r0, #0
 8004a20:	e008      	b.n	8004a34 <_printf_common+0xa8>
 8004a22:	2301      	movs	r3, #1
 8004a24:	4652      	mov	r2, sl
 8004a26:	4641      	mov	r1, r8
 8004a28:	4638      	mov	r0, r7
 8004a2a:	47c8      	blx	r9
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	d103      	bne.n	8004a38 <_printf_common+0xac>
 8004a30:	f04f 30ff 	mov.w	r0, #4294967295
 8004a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a38:	3501      	adds	r5, #1
 8004a3a:	e7c6      	b.n	80049ca <_printf_common+0x3e>
 8004a3c:	18e1      	adds	r1, r4, r3
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	2030      	movs	r0, #48	@ 0x30
 8004a42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a46:	4422      	add	r2, r4
 8004a48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a50:	3302      	adds	r3, #2
 8004a52:	e7c7      	b.n	80049e4 <_printf_common+0x58>
 8004a54:	2301      	movs	r3, #1
 8004a56:	4622      	mov	r2, r4
 8004a58:	4641      	mov	r1, r8
 8004a5a:	4638      	mov	r0, r7
 8004a5c:	47c8      	blx	r9
 8004a5e:	3001      	adds	r0, #1
 8004a60:	d0e6      	beq.n	8004a30 <_printf_common+0xa4>
 8004a62:	3601      	adds	r6, #1
 8004a64:	e7d9      	b.n	8004a1a <_printf_common+0x8e>
	...

08004a68 <_printf_i>:
 8004a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a6c:	7e0f      	ldrb	r7, [r1, #24]
 8004a6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a70:	2f78      	cmp	r7, #120	@ 0x78
 8004a72:	4691      	mov	r9, r2
 8004a74:	4680      	mov	r8, r0
 8004a76:	460c      	mov	r4, r1
 8004a78:	469a      	mov	sl, r3
 8004a7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a7e:	d807      	bhi.n	8004a90 <_printf_i+0x28>
 8004a80:	2f62      	cmp	r7, #98	@ 0x62
 8004a82:	d80a      	bhi.n	8004a9a <_printf_i+0x32>
 8004a84:	2f00      	cmp	r7, #0
 8004a86:	f000 80d2 	beq.w	8004c2e <_printf_i+0x1c6>
 8004a8a:	2f58      	cmp	r7, #88	@ 0x58
 8004a8c:	f000 80b9 	beq.w	8004c02 <_printf_i+0x19a>
 8004a90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a98:	e03a      	b.n	8004b10 <_printf_i+0xa8>
 8004a9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a9e:	2b15      	cmp	r3, #21
 8004aa0:	d8f6      	bhi.n	8004a90 <_printf_i+0x28>
 8004aa2:	a101      	add	r1, pc, #4	@ (adr r1, 8004aa8 <_printf_i+0x40>)
 8004aa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004aa8:	08004b01 	.word	0x08004b01
 8004aac:	08004b15 	.word	0x08004b15
 8004ab0:	08004a91 	.word	0x08004a91
 8004ab4:	08004a91 	.word	0x08004a91
 8004ab8:	08004a91 	.word	0x08004a91
 8004abc:	08004a91 	.word	0x08004a91
 8004ac0:	08004b15 	.word	0x08004b15
 8004ac4:	08004a91 	.word	0x08004a91
 8004ac8:	08004a91 	.word	0x08004a91
 8004acc:	08004a91 	.word	0x08004a91
 8004ad0:	08004a91 	.word	0x08004a91
 8004ad4:	08004c15 	.word	0x08004c15
 8004ad8:	08004b3f 	.word	0x08004b3f
 8004adc:	08004bcf 	.word	0x08004bcf
 8004ae0:	08004a91 	.word	0x08004a91
 8004ae4:	08004a91 	.word	0x08004a91
 8004ae8:	08004c37 	.word	0x08004c37
 8004aec:	08004a91 	.word	0x08004a91
 8004af0:	08004b3f 	.word	0x08004b3f
 8004af4:	08004a91 	.word	0x08004a91
 8004af8:	08004a91 	.word	0x08004a91
 8004afc:	08004bd7 	.word	0x08004bd7
 8004b00:	6833      	ldr	r3, [r6, #0]
 8004b02:	1d1a      	adds	r2, r3, #4
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6032      	str	r2, [r6, #0]
 8004b08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b10:	2301      	movs	r3, #1
 8004b12:	e09d      	b.n	8004c50 <_printf_i+0x1e8>
 8004b14:	6833      	ldr	r3, [r6, #0]
 8004b16:	6820      	ldr	r0, [r4, #0]
 8004b18:	1d19      	adds	r1, r3, #4
 8004b1a:	6031      	str	r1, [r6, #0]
 8004b1c:	0606      	lsls	r6, r0, #24
 8004b1e:	d501      	bpl.n	8004b24 <_printf_i+0xbc>
 8004b20:	681d      	ldr	r5, [r3, #0]
 8004b22:	e003      	b.n	8004b2c <_printf_i+0xc4>
 8004b24:	0645      	lsls	r5, r0, #25
 8004b26:	d5fb      	bpl.n	8004b20 <_printf_i+0xb8>
 8004b28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b2c:	2d00      	cmp	r5, #0
 8004b2e:	da03      	bge.n	8004b38 <_printf_i+0xd0>
 8004b30:	232d      	movs	r3, #45	@ 0x2d
 8004b32:	426d      	negs	r5, r5
 8004b34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b38:	4859      	ldr	r0, [pc, #356]	@ (8004ca0 <_printf_i+0x238>)
 8004b3a:	230a      	movs	r3, #10
 8004b3c:	e011      	b.n	8004b62 <_printf_i+0xfa>
 8004b3e:	6821      	ldr	r1, [r4, #0]
 8004b40:	6833      	ldr	r3, [r6, #0]
 8004b42:	0608      	lsls	r0, r1, #24
 8004b44:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b48:	d402      	bmi.n	8004b50 <_printf_i+0xe8>
 8004b4a:	0649      	lsls	r1, r1, #25
 8004b4c:	bf48      	it	mi
 8004b4e:	b2ad      	uxthmi	r5, r5
 8004b50:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b52:	4853      	ldr	r0, [pc, #332]	@ (8004ca0 <_printf_i+0x238>)
 8004b54:	6033      	str	r3, [r6, #0]
 8004b56:	bf14      	ite	ne
 8004b58:	230a      	movne	r3, #10
 8004b5a:	2308      	moveq	r3, #8
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b62:	6866      	ldr	r6, [r4, #4]
 8004b64:	60a6      	str	r6, [r4, #8]
 8004b66:	2e00      	cmp	r6, #0
 8004b68:	bfa2      	ittt	ge
 8004b6a:	6821      	ldrge	r1, [r4, #0]
 8004b6c:	f021 0104 	bicge.w	r1, r1, #4
 8004b70:	6021      	strge	r1, [r4, #0]
 8004b72:	b90d      	cbnz	r5, 8004b78 <_printf_i+0x110>
 8004b74:	2e00      	cmp	r6, #0
 8004b76:	d04b      	beq.n	8004c10 <_printf_i+0x1a8>
 8004b78:	4616      	mov	r6, r2
 8004b7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b7e:	fb03 5711 	mls	r7, r3, r1, r5
 8004b82:	5dc7      	ldrb	r7, [r0, r7]
 8004b84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b88:	462f      	mov	r7, r5
 8004b8a:	42bb      	cmp	r3, r7
 8004b8c:	460d      	mov	r5, r1
 8004b8e:	d9f4      	bls.n	8004b7a <_printf_i+0x112>
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d10b      	bne.n	8004bac <_printf_i+0x144>
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	07df      	lsls	r7, r3, #31
 8004b98:	d508      	bpl.n	8004bac <_printf_i+0x144>
 8004b9a:	6923      	ldr	r3, [r4, #16]
 8004b9c:	6861      	ldr	r1, [r4, #4]
 8004b9e:	4299      	cmp	r1, r3
 8004ba0:	bfde      	ittt	le
 8004ba2:	2330      	movle	r3, #48	@ 0x30
 8004ba4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ba8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004bac:	1b92      	subs	r2, r2, r6
 8004bae:	6122      	str	r2, [r4, #16]
 8004bb0:	f8cd a000 	str.w	sl, [sp]
 8004bb4:	464b      	mov	r3, r9
 8004bb6:	aa03      	add	r2, sp, #12
 8004bb8:	4621      	mov	r1, r4
 8004bba:	4640      	mov	r0, r8
 8004bbc:	f7ff fee6 	bl	800498c <_printf_common>
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	d14a      	bne.n	8004c5a <_printf_i+0x1f2>
 8004bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc8:	b004      	add	sp, #16
 8004bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	f043 0320 	orr.w	r3, r3, #32
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	4833      	ldr	r0, [pc, #204]	@ (8004ca4 <_printf_i+0x23c>)
 8004bd8:	2778      	movs	r7, #120	@ 0x78
 8004bda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	6831      	ldr	r1, [r6, #0]
 8004be2:	061f      	lsls	r7, r3, #24
 8004be4:	f851 5b04 	ldr.w	r5, [r1], #4
 8004be8:	d402      	bmi.n	8004bf0 <_printf_i+0x188>
 8004bea:	065f      	lsls	r7, r3, #25
 8004bec:	bf48      	it	mi
 8004bee:	b2ad      	uxthmi	r5, r5
 8004bf0:	6031      	str	r1, [r6, #0]
 8004bf2:	07d9      	lsls	r1, r3, #31
 8004bf4:	bf44      	itt	mi
 8004bf6:	f043 0320 	orrmi.w	r3, r3, #32
 8004bfa:	6023      	strmi	r3, [r4, #0]
 8004bfc:	b11d      	cbz	r5, 8004c06 <_printf_i+0x19e>
 8004bfe:	2310      	movs	r3, #16
 8004c00:	e7ac      	b.n	8004b5c <_printf_i+0xf4>
 8004c02:	4827      	ldr	r0, [pc, #156]	@ (8004ca0 <_printf_i+0x238>)
 8004c04:	e7e9      	b.n	8004bda <_printf_i+0x172>
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	f023 0320 	bic.w	r3, r3, #32
 8004c0c:	6023      	str	r3, [r4, #0]
 8004c0e:	e7f6      	b.n	8004bfe <_printf_i+0x196>
 8004c10:	4616      	mov	r6, r2
 8004c12:	e7bd      	b.n	8004b90 <_printf_i+0x128>
 8004c14:	6833      	ldr	r3, [r6, #0]
 8004c16:	6825      	ldr	r5, [r4, #0]
 8004c18:	6961      	ldr	r1, [r4, #20]
 8004c1a:	1d18      	adds	r0, r3, #4
 8004c1c:	6030      	str	r0, [r6, #0]
 8004c1e:	062e      	lsls	r6, r5, #24
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	d501      	bpl.n	8004c28 <_printf_i+0x1c0>
 8004c24:	6019      	str	r1, [r3, #0]
 8004c26:	e002      	b.n	8004c2e <_printf_i+0x1c6>
 8004c28:	0668      	lsls	r0, r5, #25
 8004c2a:	d5fb      	bpl.n	8004c24 <_printf_i+0x1bc>
 8004c2c:	8019      	strh	r1, [r3, #0]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	6123      	str	r3, [r4, #16]
 8004c32:	4616      	mov	r6, r2
 8004c34:	e7bc      	b.n	8004bb0 <_printf_i+0x148>
 8004c36:	6833      	ldr	r3, [r6, #0]
 8004c38:	1d1a      	adds	r2, r3, #4
 8004c3a:	6032      	str	r2, [r6, #0]
 8004c3c:	681e      	ldr	r6, [r3, #0]
 8004c3e:	6862      	ldr	r2, [r4, #4]
 8004c40:	2100      	movs	r1, #0
 8004c42:	4630      	mov	r0, r6
 8004c44:	f7fb facc 	bl	80001e0 <memchr>
 8004c48:	b108      	cbz	r0, 8004c4e <_printf_i+0x1e6>
 8004c4a:	1b80      	subs	r0, r0, r6
 8004c4c:	6060      	str	r0, [r4, #4]
 8004c4e:	6863      	ldr	r3, [r4, #4]
 8004c50:	6123      	str	r3, [r4, #16]
 8004c52:	2300      	movs	r3, #0
 8004c54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c58:	e7aa      	b.n	8004bb0 <_printf_i+0x148>
 8004c5a:	6923      	ldr	r3, [r4, #16]
 8004c5c:	4632      	mov	r2, r6
 8004c5e:	4649      	mov	r1, r9
 8004c60:	4640      	mov	r0, r8
 8004c62:	47d0      	blx	sl
 8004c64:	3001      	adds	r0, #1
 8004c66:	d0ad      	beq.n	8004bc4 <_printf_i+0x15c>
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	079b      	lsls	r3, r3, #30
 8004c6c:	d413      	bmi.n	8004c96 <_printf_i+0x22e>
 8004c6e:	68e0      	ldr	r0, [r4, #12]
 8004c70:	9b03      	ldr	r3, [sp, #12]
 8004c72:	4298      	cmp	r0, r3
 8004c74:	bfb8      	it	lt
 8004c76:	4618      	movlt	r0, r3
 8004c78:	e7a6      	b.n	8004bc8 <_printf_i+0x160>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	4632      	mov	r2, r6
 8004c7e:	4649      	mov	r1, r9
 8004c80:	4640      	mov	r0, r8
 8004c82:	47d0      	blx	sl
 8004c84:	3001      	adds	r0, #1
 8004c86:	d09d      	beq.n	8004bc4 <_printf_i+0x15c>
 8004c88:	3501      	adds	r5, #1
 8004c8a:	68e3      	ldr	r3, [r4, #12]
 8004c8c:	9903      	ldr	r1, [sp, #12]
 8004c8e:	1a5b      	subs	r3, r3, r1
 8004c90:	42ab      	cmp	r3, r5
 8004c92:	dcf2      	bgt.n	8004c7a <_printf_i+0x212>
 8004c94:	e7eb      	b.n	8004c6e <_printf_i+0x206>
 8004c96:	2500      	movs	r5, #0
 8004c98:	f104 0619 	add.w	r6, r4, #25
 8004c9c:	e7f5      	b.n	8004c8a <_printf_i+0x222>
 8004c9e:	bf00      	nop
 8004ca0:	0800f6e1 	.word	0x0800f6e1
 8004ca4:	0800f6f2 	.word	0x0800f6f2

08004ca8 <memmove>:
 8004ca8:	4288      	cmp	r0, r1
 8004caa:	b510      	push	{r4, lr}
 8004cac:	eb01 0402 	add.w	r4, r1, r2
 8004cb0:	d902      	bls.n	8004cb8 <memmove+0x10>
 8004cb2:	4284      	cmp	r4, r0
 8004cb4:	4623      	mov	r3, r4
 8004cb6:	d807      	bhi.n	8004cc8 <memmove+0x20>
 8004cb8:	1e43      	subs	r3, r0, #1
 8004cba:	42a1      	cmp	r1, r4
 8004cbc:	d008      	beq.n	8004cd0 <memmove+0x28>
 8004cbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cc6:	e7f8      	b.n	8004cba <memmove+0x12>
 8004cc8:	4402      	add	r2, r0
 8004cca:	4601      	mov	r1, r0
 8004ccc:	428a      	cmp	r2, r1
 8004cce:	d100      	bne.n	8004cd2 <memmove+0x2a>
 8004cd0:	bd10      	pop	{r4, pc}
 8004cd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cda:	e7f7      	b.n	8004ccc <memmove+0x24>

08004cdc <_sbrk_r>:
 8004cdc:	b538      	push	{r3, r4, r5, lr}
 8004cde:	4d06      	ldr	r5, [pc, #24]	@ (8004cf8 <_sbrk_r+0x1c>)
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	4608      	mov	r0, r1
 8004ce6:	602b      	str	r3, [r5, #0]
 8004ce8:	f7fc fb90 	bl	800140c <_sbrk>
 8004cec:	1c43      	adds	r3, r0, #1
 8004cee:	d102      	bne.n	8004cf6 <_sbrk_r+0x1a>
 8004cf0:	682b      	ldr	r3, [r5, #0]
 8004cf2:	b103      	cbz	r3, 8004cf6 <_sbrk_r+0x1a>
 8004cf4:	6023      	str	r3, [r4, #0]
 8004cf6:	bd38      	pop	{r3, r4, r5, pc}
 8004cf8:	200002bc 	.word	0x200002bc

08004cfc <memcpy>:
 8004cfc:	440a      	add	r2, r1
 8004cfe:	4291      	cmp	r1, r2
 8004d00:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d04:	d100      	bne.n	8004d08 <memcpy+0xc>
 8004d06:	4770      	bx	lr
 8004d08:	b510      	push	{r4, lr}
 8004d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d12:	4291      	cmp	r1, r2
 8004d14:	d1f9      	bne.n	8004d0a <memcpy+0xe>
 8004d16:	bd10      	pop	{r4, pc}

08004d18 <_realloc_r>:
 8004d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d1c:	4680      	mov	r8, r0
 8004d1e:	4615      	mov	r5, r2
 8004d20:	460c      	mov	r4, r1
 8004d22:	b921      	cbnz	r1, 8004d2e <_realloc_r+0x16>
 8004d24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d28:	4611      	mov	r1, r2
 8004d2a:	f7ff bc4b 	b.w	80045c4 <_malloc_r>
 8004d2e:	b92a      	cbnz	r2, 8004d3c <_realloc_r+0x24>
 8004d30:	f7ff fbdc 	bl	80044ec <_free_r>
 8004d34:	2400      	movs	r4, #0
 8004d36:	4620      	mov	r0, r4
 8004d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d3c:	f000 f81a 	bl	8004d74 <_malloc_usable_size_r>
 8004d40:	4285      	cmp	r5, r0
 8004d42:	4606      	mov	r6, r0
 8004d44:	d802      	bhi.n	8004d4c <_realloc_r+0x34>
 8004d46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d4a:	d8f4      	bhi.n	8004d36 <_realloc_r+0x1e>
 8004d4c:	4629      	mov	r1, r5
 8004d4e:	4640      	mov	r0, r8
 8004d50:	f7ff fc38 	bl	80045c4 <_malloc_r>
 8004d54:	4607      	mov	r7, r0
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d0ec      	beq.n	8004d34 <_realloc_r+0x1c>
 8004d5a:	42b5      	cmp	r5, r6
 8004d5c:	462a      	mov	r2, r5
 8004d5e:	4621      	mov	r1, r4
 8004d60:	bf28      	it	cs
 8004d62:	4632      	movcs	r2, r6
 8004d64:	f7ff ffca 	bl	8004cfc <memcpy>
 8004d68:	4621      	mov	r1, r4
 8004d6a:	4640      	mov	r0, r8
 8004d6c:	f7ff fbbe 	bl	80044ec <_free_r>
 8004d70:	463c      	mov	r4, r7
 8004d72:	e7e0      	b.n	8004d36 <_realloc_r+0x1e>

08004d74 <_malloc_usable_size_r>:
 8004d74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d78:	1f18      	subs	r0, r3, #4
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	bfbc      	itt	lt
 8004d7e:	580b      	ldrlt	r3, [r1, r0]
 8004d80:	18c0      	addlt	r0, r0, r3
 8004d82:	4770      	bx	lr

08004d84 <_init>:
 8004d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d86:	bf00      	nop
 8004d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d8a:	bc08      	pop	{r3}
 8004d8c:	469e      	mov	lr, r3
 8004d8e:	4770      	bx	lr

08004d90 <_fini>:
 8004d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d92:	bf00      	nop
 8004d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d96:	bc08      	pop	{r3}
 8004d98:	469e      	mov	lr, r3
 8004d9a:	4770      	bx	lr
